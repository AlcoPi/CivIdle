// This file is generated
import koffi from "koffi";
import path from "path";

let lib;
if (process.platform === "win32") {
   lib = koffi.load(path.join(__dirname, "../steamworks/steam_api64.dll"));
} else if (process.platform === "linux") {
   lib = koffi.load(path.join(__dirname, "../steamworks/libsteam_api.so"));
} else if (process.platform === "darwin") {
   lib = koffi.load(path.join(__dirname, "../steamworks/libsteam_api.dylib"));
} else {
   throw new Error("Unsupported platform: " + process.platform);
}

type KoffiFunc<T extends (...args:any) => any> = T & {
   async: T;
};
// Typedefs
koffi.alias("uint64_steamid", "uint64");
koffi.alias("uint64_gameid", "uint64");
koffi.alias("HSteamPipe", "int");
koffi.alias("HSteamUser", "int");
koffi.alias("lint64", "long long");
koffi.alias("ulint64", "unsigned long long");
koffi.alias("intp", "long long");
koffi.alias("uintp", "unsigned long long");
koffi.alias("AppId_t", "unsigned int");
koffi.alias("DepotId_t", "unsigned int");
koffi.alias("RTime32", "unsigned int");
koffi.alias("SteamAPICall_t", "unsigned long long");
koffi.alias("AccountID_t", "unsigned int");
koffi.alias("PartyBeaconID_t", "unsigned long long");
koffi.alias("HAuthTicket", "unsigned int");
koffi.alias("FriendsGroupID_t", "short");
koffi.alias("HServerListRequest", "void *");
koffi.alias("HServerQuery", "int");
koffi.alias("UGCHandle_t", "unsigned long long");
koffi.alias("PublishedFileUpdateHandle_t", "unsigned long long");
koffi.alias("PublishedFileId_t", "unsigned long long");
koffi.alias("UGCFileWriteStreamHandle_t", "unsigned long long");
koffi.alias("SteamLeaderboard_t", "unsigned long long");
koffi.alias("SteamLeaderboardEntries_t", "unsigned long long");
koffi.alias("SNetSocket_t", "unsigned int");
koffi.alias("SNetListenSocket_t", "unsigned int");
koffi.alias("ScreenshotHandle", "unsigned int");
koffi.alias("HTTPRequestHandle", "unsigned int");
koffi.alias("HTTPCookieContainerHandle", "unsigned int");
koffi.alias("InputHandle_t", "unsigned long long");
koffi.alias("InputActionSetHandle_t", "unsigned long long");
koffi.alias("InputDigitalActionHandle_t", "unsigned long long");
koffi.alias("InputAnalogActionHandle_t", "unsigned long long");
koffi.alias("ControllerHandle_t", "unsigned long long");
koffi.alias("ControllerActionSetHandle_t", "unsigned long long");
koffi.alias("ControllerDigitalActionHandle_t", "unsigned long long");
koffi.alias("ControllerAnalogActionHandle_t", "unsigned long long");
koffi.alias("UGCQueryHandle_t", "unsigned long long");
koffi.alias("UGCUpdateHandle_t", "unsigned long long");
koffi.alias("HHTMLBrowser", "unsigned int");
koffi.alias("SteamItemInstanceID_t", "unsigned long long");
koffi.alias("SteamItemDef_t", "int");
koffi.alias("SteamInventoryResult_t", "int");
koffi.alias("SteamInventoryUpdateHandle_t", "unsigned long long");
koffi.alias("RemotePlaySessionID_t", "unsigned int");
koffi.alias("HSteamNetConnection", "unsigned int");
koffi.alias("HSteamListenSocket", "unsigned int");
koffi.alias("HSteamNetPollGroup", "unsigned int");
koffi.alias("SteamNetworkingPOPID", "unsigned int");
koffi.alias("SteamNetworkingMicroseconds", "long long");
// Functions
interface ISteamClient { __brand: "ISteamClient" }
koffi.opaque("ISteamClient");
export const SteamAPI_ISteamClient_CreateSteamPipe: (self: ISteamClient) => number = lib.cdecl("HSteamPipe SteamAPI_ISteamClient_CreateSteamPipe(ISteamClient * self)");
export const SteamAPI_ISteamClient_BReleaseSteamPipe: (self: ISteamClient, hSteamPipe: number) => boolean = lib.cdecl("bool SteamAPI_ISteamClient_BReleaseSteamPipe(ISteamClient * self, , HSteamPipe hSteamPipe)");
export const SteamAPI_ISteamClient_ConnectToGlobalUser: (self: ISteamClient, hSteamPipe: number) => number = lib.cdecl("HSteamUser SteamAPI_ISteamClient_ConnectToGlobalUser(ISteamClient * self, , HSteamPipe hSteamPipe)");
export const SteamAPI_ISteamClient_ReleaseUser: (self: ISteamClient, hSteamPipe: number, hUser: number) => void = lib.cdecl("void SteamAPI_ISteamClient_ReleaseUser(ISteamClient * self, , HSteamPipe hSteamPipe, HSteamUser hUser)");
export const SteamAPI_ISteamClient_GetISteamGenericInterface: (self: ISteamClient, hSteamUser: number, hSteamPipe: number, pchVersion: string) => [void] = lib.cdecl("void * SteamAPI_ISteamClient_GetISteamGenericInterface(ISteamClient * self, , HSteamUser hSteamUser, HSteamPipe hSteamPipe, const char * pchVersion)");
export const SteamAPI_ISteamClient_GetIPCCallCount: (self: ISteamClient) => number = lib.cdecl("uint32 SteamAPI_ISteamClient_GetIPCCallCount(ISteamClient * self)");
export const SteamAPI_ISteamClient_BShutdownIfAllPipesClosed: (self: ISteamClient) => boolean = lib.cdecl("bool SteamAPI_ISteamClient_BShutdownIfAllPipesClosed(ISteamClient * self)");
interface ISteamUser { __brand: "ISteamUser" }
koffi.opaque("ISteamUser");
export const SteamAPI_SteamUser_v021: KoffiFunc<() => ISteamUser> = lib.cdecl("ISteamUser* SteamAPI_SteamUser_v021()");
export const SteamAPI_ISteamUser_GetHSteamUser: (self: ISteamUser) => number = lib.cdecl("HSteamUser SteamAPI_ISteamUser_GetHSteamUser(ISteamUser * self)");
export const SteamAPI_ISteamUser_BLoggedOn: (self: ISteamUser) => boolean = lib.cdecl("bool SteamAPI_ISteamUser_BLoggedOn(ISteamUser * self)");
export const SteamAPI_ISteamUser_GetSteamID: (self: ISteamUser) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamUser_GetSteamID(ISteamUser * self)");
export const SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED: (self: ISteamUser, pAuthBlob: [void], cbMaxAuthBlob: number, steamIDGameServer: number, unIPServer: number, usPortServer: number, bSecure: boolean) => number = lib.cdecl("int SteamAPI_ISteamUser_InitiateGameConnection_DEPRECATED(ISteamUser * self, , _Out_ void * pAuthBlob, int cbMaxAuthBlob, uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer, bool bSecure)");
export const SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED: (self: ISteamUser, unIPServer: number, usPortServer: number) => void = lib.cdecl("void SteamAPI_ISteamUser_TerminateGameConnection_DEPRECATED(ISteamUser * self, , uint32 unIPServer, uint16 usPortServer)");
export const SteamAPI_ISteamUser_TrackAppUsageEvent: (self: ISteamUser, gameID: number, eAppUsageEvent: number, pchExtraInfo: string) => void = lib.cdecl("void SteamAPI_ISteamUser_TrackAppUsageEvent(ISteamUser * self, , uint64_gameid gameID, int eAppUsageEvent, const char * pchExtraInfo)");
export const SteamAPI_ISteamUser_GetUserDataFolder: (self: ISteamUser, pchBuffer: [string], cubBuffer: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUser_GetUserDataFolder(ISteamUser * self, , _Out_ char * pchBuffer, int cubBuffer)");
export const SteamAPI_ISteamUser_StartVoiceRecording: (self: ISteamUser) => void = lib.cdecl("void SteamAPI_ISteamUser_StartVoiceRecording(ISteamUser * self)");
export const SteamAPI_ISteamUser_StopVoiceRecording: (self: ISteamUser) => void = lib.cdecl("void SteamAPI_ISteamUser_StopVoiceRecording(ISteamUser * self)");
export const SteamAPI_ISteamUser_GetVoiceOptimalSampleRate: (self: ISteamUser) => number = lib.cdecl("uint32 SteamAPI_ISteamUser_GetVoiceOptimalSampleRate(ISteamUser * self)");
export const SteamAPI_ISteamUser_GetAuthSessionTicket: (self: ISteamUser, pTicket: [void], cbMaxTicket: number, pcbTicket: [number]) => number = lib.cdecl("HAuthTicket SteamAPI_ISteamUser_GetAuthSessionTicket(ISteamUser * self, , _Out_ void * pTicket, int cbMaxTicket, _Out_ uint32 * pcbTicket)");
export const SteamAPI_ISteamUser_EndAuthSession: (self: ISteamUser, steamID: number) => void = lib.cdecl("void SteamAPI_ISteamUser_EndAuthSession(ISteamUser * self, , uint64_steamid steamID)");
export const SteamAPI_ISteamUser_CancelAuthTicket: (self: ISteamUser, hAuthTicket: number) => void = lib.cdecl("void SteamAPI_ISteamUser_CancelAuthTicket(ISteamUser * self, , HAuthTicket hAuthTicket)");
export const SteamAPI_ISteamUser_BIsBehindNAT: (self: ISteamUser) => boolean = lib.cdecl("bool SteamAPI_ISteamUser_BIsBehindNAT(ISteamUser * self)");
export const SteamAPI_ISteamUser_AdvertiseGame: (self: ISteamUser, steamIDGameServer: number, unIPServer: number, usPortServer: number) => void = lib.cdecl("void SteamAPI_ISteamUser_AdvertiseGame(ISteamUser * self, , uint64_steamid steamIDGameServer, uint32 unIPServer, uint16 usPortServer)");
export const SteamAPI_ISteamUser_RequestEncryptedAppTicket: (self: ISteamUser, pDataToInclude: [void], cbDataToInclude: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUser_RequestEncryptedAppTicket(ISteamUser * self, , _Out_ void * pDataToInclude, int cbDataToInclude)");
export const SteamAPI_ISteamUser_GetEncryptedAppTicket: (self: ISteamUser, pTicket: [void], cbMaxTicket: number, pcbTicket: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUser_GetEncryptedAppTicket(ISteamUser * self, , _Out_ void * pTicket, int cbMaxTicket, _Out_ uint32 * pcbTicket)");
export const SteamAPI_ISteamUser_GetGameBadgeLevel: (self: ISteamUser, nSeries: number, bFoil: boolean) => number = lib.cdecl("int SteamAPI_ISteamUser_GetGameBadgeLevel(ISteamUser * self, , int nSeries, bool bFoil)");
export const SteamAPI_ISteamUser_GetPlayerSteamLevel: (self: ISteamUser) => number = lib.cdecl("int SteamAPI_ISteamUser_GetPlayerSteamLevel(ISteamUser * self)");
export const SteamAPI_ISteamUser_RequestStoreAuthURL: (self: ISteamUser, pchRedirectURL: string) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUser_RequestStoreAuthURL(ISteamUser * self, , const char * pchRedirectURL)");
export const SteamAPI_ISteamUser_BIsPhoneVerified: (self: ISteamUser) => boolean = lib.cdecl("bool SteamAPI_ISteamUser_BIsPhoneVerified(ISteamUser * self)");
export const SteamAPI_ISteamUser_BIsTwoFactorEnabled: (self: ISteamUser) => boolean = lib.cdecl("bool SteamAPI_ISteamUser_BIsTwoFactorEnabled(ISteamUser * self)");
export const SteamAPI_ISteamUser_BIsPhoneIdentifying: (self: ISteamUser) => boolean = lib.cdecl("bool SteamAPI_ISteamUser_BIsPhoneIdentifying(ISteamUser * self)");
export const SteamAPI_ISteamUser_BIsPhoneRequiringVerification: (self: ISteamUser) => boolean = lib.cdecl("bool SteamAPI_ISteamUser_BIsPhoneRequiringVerification(ISteamUser * self)");
export const SteamAPI_ISteamUser_GetMarketEligibility: (self: ISteamUser) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUser_GetMarketEligibility(ISteamUser * self)");
export const SteamAPI_ISteamUser_GetDurationControl: (self: ISteamUser) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUser_GetDurationControl(ISteamUser * self)");
interface ISteamFriends { __brand: "ISteamFriends" }
koffi.opaque("ISteamFriends");
export const SteamAPI_SteamFriends_v017: KoffiFunc<() => ISteamFriends> = lib.cdecl("ISteamFriends* SteamAPI_SteamFriends_v017()");
export const SteamAPI_ISteamFriends_GetPersonaName: (self: ISteamFriends) => string = lib.cdecl("const char * SteamAPI_ISteamFriends_GetPersonaName(ISteamFriends * self)");
export const SteamAPI_ISteamFriends_SetPersonaName: (self: ISteamFriends, pchPersonaName: string) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamFriends_SetPersonaName(ISteamFriends * self, , const char * pchPersonaName)");
export const SteamAPI_ISteamFriends_GetFriendCount: (self: ISteamFriends, iFriendFlags: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetFriendCount(ISteamFriends * self, , int iFriendFlags)");
export const SteamAPI_ISteamFriends_GetFriendByIndex: (self: ISteamFriends, iFriend: number, iFriendFlags: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamFriends_GetFriendByIndex(ISteamFriends * self, , int iFriend, int iFriendFlags)");
export const SteamAPI_ISteamFriends_GetFriendPersonaName: (self: ISteamFriends, steamIDFriend: number) => string = lib.cdecl("const char * SteamAPI_ISteamFriends_GetFriendPersonaName(ISteamFriends * self, , uint64_steamid steamIDFriend)");
export const SteamAPI_ISteamFriends_GetFriendPersonaNameHistory: (self: ISteamFriends, steamIDFriend: number, iPersonaName: number) => string = lib.cdecl("const char * SteamAPI_ISteamFriends_GetFriendPersonaNameHistory(ISteamFriends * self, , uint64_steamid steamIDFriend, int iPersonaName)");
export const SteamAPI_ISteamFriends_GetFriendSteamLevel: (self: ISteamFriends, steamIDFriend: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetFriendSteamLevel(ISteamFriends * self, , uint64_steamid steamIDFriend)");
export const SteamAPI_ISteamFriends_GetPlayerNickname: (self: ISteamFriends, steamIDPlayer: number) => string = lib.cdecl("const char * SteamAPI_ISteamFriends_GetPlayerNickname(ISteamFriends * self, , uint64_steamid steamIDPlayer)");
export const SteamAPI_ISteamFriends_GetFriendsGroupCount: (self: ISteamFriends) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetFriendsGroupCount(ISteamFriends * self)");
export const SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex: (self: ISteamFriends, iFG: number) => number = lib.cdecl("FriendsGroupID_t SteamAPI_ISteamFriends_GetFriendsGroupIDByIndex(ISteamFriends * self, , int iFG)");
export const SteamAPI_ISteamFriends_GetFriendsGroupName: (self: ISteamFriends, friendsGroupID: number) => string = lib.cdecl("const char * SteamAPI_ISteamFriends_GetFriendsGroupName(ISteamFriends * self, , FriendsGroupID_t friendsGroupID)");
export const SteamAPI_ISteamFriends_GetFriendsGroupMembersCount: (self: ISteamFriends, friendsGroupID: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetFriendsGroupMembersCount(ISteamFriends * self, , FriendsGroupID_t friendsGroupID)");
export const SteamAPI_ISteamFriends_HasFriend: (self: ISteamFriends, steamIDFriend: number, iFriendFlags: number) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_HasFriend(ISteamFriends * self, , uint64_steamid steamIDFriend, int iFriendFlags)");
export const SteamAPI_ISteamFriends_GetClanCount: (self: ISteamFriends) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetClanCount(ISteamFriends * self)");
export const SteamAPI_ISteamFriends_GetClanByIndex: (self: ISteamFriends, iClan: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamFriends_GetClanByIndex(ISteamFriends * self, , int iClan)");
export const SteamAPI_ISteamFriends_GetClanName: (self: ISteamFriends, steamIDClan: number) => string = lib.cdecl("const char * SteamAPI_ISteamFriends_GetClanName(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_GetClanTag: (self: ISteamFriends, steamIDClan: number) => string = lib.cdecl("const char * SteamAPI_ISteamFriends_GetClanTag(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_GetClanActivityCounts: (self: ISteamFriends, steamIDClan: number, pnOnline: [number], pnInGame: [number], pnChatting: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_GetClanActivityCounts(ISteamFriends * self, , uint64_steamid steamIDClan, _Out_ int * pnOnline, _Out_ int * pnInGame, _Out_ int * pnChatting)");
export const SteamAPI_ISteamFriends_GetFriendCountFromSource: (self: ISteamFriends, steamIDSource: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetFriendCountFromSource(ISteamFriends * self, , uint64_steamid steamIDSource)");
export const SteamAPI_ISteamFriends_GetFriendFromSourceByIndex: (self: ISteamFriends, steamIDSource: number, iFriend: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamFriends_GetFriendFromSourceByIndex(ISteamFriends * self, , uint64_steamid steamIDSource, int iFriend)");
export const SteamAPI_ISteamFriends_IsUserInSource: (self: ISteamFriends, steamIDUser: number, steamIDSource: number) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_IsUserInSource(ISteamFriends * self, , uint64_steamid steamIDUser, uint64_steamid steamIDSource)");
export const SteamAPI_ISteamFriends_SetInGameVoiceSpeaking: (self: ISteamFriends, steamIDUser: number, bSpeaking: boolean) => void = lib.cdecl("void SteamAPI_ISteamFriends_SetInGameVoiceSpeaking(ISteamFriends * self, , uint64_steamid steamIDUser, bool bSpeaking)");
export const SteamAPI_ISteamFriends_ActivateGameOverlay: (self: ISteamFriends, pchDialog: string) => void = lib.cdecl("void SteamAPI_ISteamFriends_ActivateGameOverlay(ISteamFriends * self, , const char * pchDialog)");
export const SteamAPI_ISteamFriends_ActivateGameOverlayToUser: (self: ISteamFriends, pchDialog: string, steamID: number) => void = lib.cdecl("void SteamAPI_ISteamFriends_ActivateGameOverlayToUser(ISteamFriends * self, , const char * pchDialog, uint64_steamid steamID)");
export const SteamAPI_ISteamFriends_SetPlayedWith: (self: ISteamFriends, steamIDUserPlayedWith: number) => void = lib.cdecl("void SteamAPI_ISteamFriends_SetPlayedWith(ISteamFriends * self, , uint64_steamid steamIDUserPlayedWith)");
export const SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog: (self: ISteamFriends, steamIDLobby: number) => void = lib.cdecl("void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialog(ISteamFriends * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamFriends_GetSmallFriendAvatar: (self: ISteamFriends, steamIDFriend: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetSmallFriendAvatar(ISteamFriends * self, , uint64_steamid steamIDFriend)");
export const SteamAPI_ISteamFriends_GetMediumFriendAvatar: (self: ISteamFriends, steamIDFriend: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetMediumFriendAvatar(ISteamFriends * self, , uint64_steamid steamIDFriend)");
export const SteamAPI_ISteamFriends_GetLargeFriendAvatar: (self: ISteamFriends, steamIDFriend: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetLargeFriendAvatar(ISteamFriends * self, , uint64_steamid steamIDFriend)");
export const SteamAPI_ISteamFriends_RequestUserInformation: (self: ISteamFriends, steamIDUser: number, bRequireNameOnly: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_RequestUserInformation(ISteamFriends * self, , uint64_steamid steamIDUser, bool bRequireNameOnly)");
export const SteamAPI_ISteamFriends_RequestClanOfficerList: (self: ISteamFriends, steamIDClan: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamFriends_RequestClanOfficerList(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_GetClanOwner: (self: ISteamFriends, steamIDClan: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamFriends_GetClanOwner(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_GetClanOfficerCount: (self: ISteamFriends, steamIDClan: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetClanOfficerCount(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_GetClanOfficerByIndex: (self: ISteamFriends, steamIDClan: number, iOfficer: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamFriends_GetClanOfficerByIndex(ISteamFriends * self, , uint64_steamid steamIDClan, int iOfficer)");
export const SteamAPI_ISteamFriends_GetUserRestrictions: (self: ISteamFriends) => number = lib.cdecl("uint32 SteamAPI_ISteamFriends_GetUserRestrictions(ISteamFriends * self)");
export const SteamAPI_ISteamFriends_SetRichPresence: (self: ISteamFriends, pchKey: string, pchValue: string) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_SetRichPresence(ISteamFriends * self, , const char * pchKey, const char * pchValue)");
export const SteamAPI_ISteamFriends_ClearRichPresence: (self: ISteamFriends) => void = lib.cdecl("void SteamAPI_ISteamFriends_ClearRichPresence(ISteamFriends * self)");
export const SteamAPI_ISteamFriends_GetFriendRichPresence: (self: ISteamFriends, steamIDFriend: number, pchKey: string) => string = lib.cdecl("const char * SteamAPI_ISteamFriends_GetFriendRichPresence(ISteamFriends * self, , uint64_steamid steamIDFriend, const char * pchKey)");
export const SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount: (self: ISteamFriends, steamIDFriend: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetFriendRichPresenceKeyCount(ISteamFriends * self, , uint64_steamid steamIDFriend)");
export const SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex: (self: ISteamFriends, steamIDFriend: number, iKey: number) => string = lib.cdecl("const char * SteamAPI_ISteamFriends_GetFriendRichPresenceKeyByIndex(ISteamFriends * self, , uint64_steamid steamIDFriend, int iKey)");
export const SteamAPI_ISteamFriends_RequestFriendRichPresence: (self: ISteamFriends, steamIDFriend: number) => void = lib.cdecl("void SteamAPI_ISteamFriends_RequestFriendRichPresence(ISteamFriends * self, , uint64_steamid steamIDFriend)");
export const SteamAPI_ISteamFriends_InviteUserToGame: (self: ISteamFriends, steamIDFriend: number, pchConnectString: string) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_InviteUserToGame(ISteamFriends * self, , uint64_steamid steamIDFriend, const char * pchConnectString)");
export const SteamAPI_ISteamFriends_GetCoplayFriendCount: (self: ISteamFriends) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetCoplayFriendCount(ISteamFriends * self)");
export const SteamAPI_ISteamFriends_GetCoplayFriend: (self: ISteamFriends, iCoplayFriend: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamFriends_GetCoplayFriend(ISteamFriends * self, , int iCoplayFriend)");
export const SteamAPI_ISteamFriends_GetFriendCoplayTime: (self: ISteamFriends, steamIDFriend: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetFriendCoplayTime(ISteamFriends * self, , uint64_steamid steamIDFriend)");
export const SteamAPI_ISteamFriends_GetFriendCoplayGame: (self: ISteamFriends, steamIDFriend: number) => number = lib.cdecl("AppId_t SteamAPI_ISteamFriends_GetFriendCoplayGame(ISteamFriends * self, , uint64_steamid steamIDFriend)");
export const SteamAPI_ISteamFriends_JoinClanChatRoom: (self: ISteamFriends, steamIDClan: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamFriends_JoinClanChatRoom(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_LeaveClanChatRoom: (self: ISteamFriends, steamIDClan: number) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_LeaveClanChatRoom(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_GetClanChatMemberCount: (self: ISteamFriends, steamIDClan: number) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetClanChatMemberCount(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_GetChatMemberByIndex: (self: ISteamFriends, steamIDClan: number, iUser: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamFriends_GetChatMemberByIndex(ISteamFriends * self, , uint64_steamid steamIDClan, int iUser)");
export const SteamAPI_ISteamFriends_SendClanChatMessage: (self: ISteamFriends, steamIDClanChat: number, pchText: string) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_SendClanChatMessage(ISteamFriends * self, , uint64_steamid steamIDClanChat, const char * pchText)");
export const SteamAPI_ISteamFriends_IsClanChatAdmin: (self: ISteamFriends, steamIDClanChat: number, steamIDUser: number) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_IsClanChatAdmin(ISteamFriends * self, , uint64_steamid steamIDClanChat, uint64_steamid steamIDUser)");
export const SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam: (self: ISteamFriends, steamIDClanChat: number) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_IsClanChatWindowOpenInSteam(ISteamFriends * self, , uint64_steamid steamIDClanChat)");
export const SteamAPI_ISteamFriends_OpenClanChatWindowInSteam: (self: ISteamFriends, steamIDClanChat: number) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_OpenClanChatWindowInSteam(ISteamFriends * self, , uint64_steamid steamIDClanChat)");
export const SteamAPI_ISteamFriends_CloseClanChatWindowInSteam: (self: ISteamFriends, steamIDClanChat: number) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_CloseClanChatWindowInSteam(ISteamFriends * self, , uint64_steamid steamIDClanChat)");
export const SteamAPI_ISteamFriends_SetListenForFriendsMessages: (self: ISteamFriends, bInterceptEnabled: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_SetListenForFriendsMessages(ISteamFriends * self, , bool bInterceptEnabled)");
export const SteamAPI_ISteamFriends_ReplyToFriendMessage: (self: ISteamFriends, steamIDFriend: number, pchMsgToSend: string) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_ReplyToFriendMessage(ISteamFriends * self, , uint64_steamid steamIDFriend, const char * pchMsgToSend)");
export const SteamAPI_ISteamFriends_GetFollowerCount: (self: ISteamFriends, steamID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamFriends_GetFollowerCount(ISteamFriends * self, , uint64_steamid steamID)");
export const SteamAPI_ISteamFriends_IsFollowing: (self: ISteamFriends, steamID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamFriends_IsFollowing(ISteamFriends * self, , uint64_steamid steamID)");
export const SteamAPI_ISteamFriends_EnumerateFollowingList: (self: ISteamFriends, unStartIndex: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamFriends_EnumerateFollowingList(ISteamFriends * self, , uint32 unStartIndex)");
export const SteamAPI_ISteamFriends_IsClanPublic: (self: ISteamFriends, steamIDClan: number) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_IsClanPublic(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_IsClanOfficialGameGroup: (self: ISteamFriends, steamIDClan: number) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_IsClanOfficialGameGroup(ISteamFriends * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages: (self: ISteamFriends) => number = lib.cdecl("int SteamAPI_ISteamFriends_GetNumChatsWithUnreadPriorityMessages(ISteamFriends * self)");
export const SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog: (self: ISteamFriends, steamIDLobby: number) => void = lib.cdecl("void SteamAPI_ISteamFriends_ActivateGameOverlayRemotePlayTogetherInviteDialog(ISteamFriends * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser: (self: ISteamFriends, pchProtocol: string) => boolean = lib.cdecl("bool SteamAPI_ISteamFriends_RegisterProtocolInOverlayBrowser(ISteamFriends * self, , const char * pchProtocol)");
export const SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString: (self: ISteamFriends, pchConnectString: string) => void = lib.cdecl("void SteamAPI_ISteamFriends_ActivateGameOverlayInviteDialogConnectString(ISteamFriends * self, , const char * pchConnectString)");
interface ISteamUtils { __brand: "ISteamUtils" }
koffi.opaque("ISteamUtils");
export const SteamAPI_SteamUtils_v010: KoffiFunc<() => ISteamUtils> = lib.cdecl("ISteamUtils* SteamAPI_SteamUtils_v010()");
export const SteamAPI_SteamGameServerUtils_v010: KoffiFunc<() => ISteamUtils> = lib.cdecl("ISteamUtils* SteamAPI_SteamGameServerUtils_v010()");
export const SteamAPI_ISteamUtils_GetSecondsSinceAppActive: (self: ISteamUtils) => number = lib.cdecl("uint32 SteamAPI_ISteamUtils_GetSecondsSinceAppActive(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_GetSecondsSinceComputerActive: (self: ISteamUtils) => number = lib.cdecl("uint32 SteamAPI_ISteamUtils_GetSecondsSinceComputerActive(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_GetServerRealTime: (self: ISteamUtils) => number = lib.cdecl("uint32 SteamAPI_ISteamUtils_GetServerRealTime(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_GetIPCountry: (self: ISteamUtils) => string = lib.cdecl("const char * SteamAPI_ISteamUtils_GetIPCountry(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_GetImageSize: (self: ISteamUtils, iImage: number, pnWidth: [number], pnHeight: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_GetImageSize(ISteamUtils * self, , int iImage, _Out_ uint32 * pnWidth, _Out_ uint32 * pnHeight)");
export const SteamAPI_ISteamUtils_GetImageRGBA: (self: ISteamUtils, iImage: number, pubDest: [number], nDestBufferSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_GetImageRGBA(ISteamUtils * self, , int iImage, _Out_ uint8 * pubDest, int nDestBufferSize)");
export const SteamAPI_ISteamUtils_GetCurrentBatteryPower: (self: ISteamUtils) => number = lib.cdecl("uint8 SteamAPI_ISteamUtils_GetCurrentBatteryPower(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_GetAppID: (self: ISteamUtils) => number = lib.cdecl("uint32 SteamAPI_ISteamUtils_GetAppID(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_IsAPICallCompleted: (self: ISteamUtils, hSteamAPICall: number, pbFailed: [boolean]) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_IsAPICallCompleted(ISteamUtils * self, , SteamAPICall_t hSteamAPICall, _Out_ bool * pbFailed)");
export const SteamAPI_ISteamUtils_GetAPICallResult: (self: ISteamUtils, hSteamAPICall: number, pCallback: [void], cubCallback: number, iCallbackExpected: number, pbFailed: [boolean]) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_GetAPICallResult(ISteamUtils * self, , SteamAPICall_t hSteamAPICall, _Out_ void * pCallback, int cubCallback, int iCallbackExpected, _Out_ bool * pbFailed)");
export const SteamAPI_ISteamUtils_GetIPCCallCount: (self: ISteamUtils) => number = lib.cdecl("uint32 SteamAPI_ISteamUtils_GetIPCCallCount(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_IsOverlayEnabled: (self: ISteamUtils) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_IsOverlayEnabled(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_BOverlayNeedsPresent: (self: ISteamUtils) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_BOverlayNeedsPresent(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_CheckFileSignature: (self: ISteamUtils, szFileName: string) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUtils_CheckFileSignature(ISteamUtils * self, , const char * szFileName)");
export const SteamAPI_ISteamUtils_GetEnteredGamepadTextLength: (self: ISteamUtils) => number = lib.cdecl("uint32 SteamAPI_ISteamUtils_GetEnteredGamepadTextLength(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_GetEnteredGamepadTextInput: (self: ISteamUtils, pchText: [string], cchText: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_GetEnteredGamepadTextInput(ISteamUtils * self, , _Out_ char * pchText, uint32 cchText)");
export const SteamAPI_ISteamUtils_GetSteamUILanguage: (self: ISteamUtils) => string = lib.cdecl("const char * SteamAPI_ISteamUtils_GetSteamUILanguage(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_IsSteamRunningInVR: (self: ISteamUtils) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_IsSteamRunningInVR(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_SetOverlayNotificationInset: (self: ISteamUtils, nHorizontalInset: number, nVerticalInset: number) => void = lib.cdecl("void SteamAPI_ISteamUtils_SetOverlayNotificationInset(ISteamUtils * self, , int nHorizontalInset, int nVerticalInset)");
export const SteamAPI_ISteamUtils_IsSteamInBigPictureMode: (self: ISteamUtils) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_IsSteamInBigPictureMode(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_StartVRDashboard: (self: ISteamUtils) => void = lib.cdecl("void SteamAPI_ISteamUtils_StartVRDashboard(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled: (self: ISteamUtils) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_IsVRHeadsetStreamingEnabled(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled: (self: ISteamUtils, bEnabled: boolean) => void = lib.cdecl("void SteamAPI_ISteamUtils_SetVRHeadsetStreamingEnabled(ISteamUtils * self, , bool bEnabled)");
export const SteamAPI_ISteamUtils_IsSteamChinaLauncher: (self: ISteamUtils) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_IsSteamChinaLauncher(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_InitFilterText: (self: ISteamUtils, unFilterOptions: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_InitFilterText(ISteamUtils * self, , uint32 unFilterOptions)");
export const SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck: (self: ISteamUtils) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_IsSteamRunningOnSteamDeck(ISteamUtils * self)");
export const SteamAPI_ISteamUtils_SetGameLauncherMode: (self: ISteamUtils, bLauncherMode: boolean) => void = lib.cdecl("void SteamAPI_ISteamUtils_SetGameLauncherMode(ISteamUtils * self, , bool bLauncherMode)");
export const SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput: (self: ISteamUtils) => boolean = lib.cdecl("bool SteamAPI_ISteamUtils_DismissFloatingGamepadTextInput(ISteamUtils * self)");
interface ISteamMatchmaking { __brand: "ISteamMatchmaking" }
koffi.opaque("ISteamMatchmaking");
export const SteamAPI_SteamMatchmaking_v009: KoffiFunc<() => ISteamMatchmaking> = lib.cdecl("ISteamMatchmaking* SteamAPI_SteamMatchmaking_v009()");
export const SteamAPI_ISteamMatchmaking_GetFavoriteGameCount: (self: ISteamMatchmaking) => number = lib.cdecl("int SteamAPI_ISteamMatchmaking_GetFavoriteGameCount(ISteamMatchmaking * self)");
export const SteamAPI_ISteamMatchmaking_GetFavoriteGame: (self: ISteamMatchmaking, iGame: number, pnAppID: [number], pnIP: [number], pnConnPort: [number], pnQueryPort: [number], punFlags: [number], pRTime32LastPlayedOnServer: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_GetFavoriteGame(ISteamMatchmaking * self, , int iGame, _Out_ AppId_t * pnAppID, _Out_ uint32 * pnIP, _Out_ uint16 * pnConnPort, _Out_ uint16 * pnQueryPort, _Out_ uint32 * punFlags, _Out_ uint32 * pRTime32LastPlayedOnServer)");
export const SteamAPI_ISteamMatchmaking_AddFavoriteGame: (self: ISteamMatchmaking, nAppID: number, nIP: number, nConnPort: number, nQueryPort: number, unFlags: number, rTime32LastPlayedOnServer: number) => number = lib.cdecl("int SteamAPI_ISteamMatchmaking_AddFavoriteGame(ISteamMatchmaking * self, , AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags, uint32 rTime32LastPlayedOnServer)");
export const SteamAPI_ISteamMatchmaking_RemoveFavoriteGame: (self: ISteamMatchmaking, nAppID: number, nIP: number, nConnPort: number, nQueryPort: number, unFlags: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_RemoveFavoriteGame(ISteamMatchmaking * self, , AppId_t nAppID, uint32 nIP, uint16 nConnPort, uint16 nQueryPort, uint32 unFlags)");
export const SteamAPI_ISteamMatchmaking_RequestLobbyList: (self: ISteamMatchmaking) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamMatchmaking_RequestLobbyList(ISteamMatchmaking * self)");
export const SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter: (self: ISteamMatchmaking, pchKeyToMatch: string, nValueToBeCloseTo: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmaking_AddRequestLobbyListNearValueFilter(ISteamMatchmaking * self, , const char * pchKeyToMatch, int nValueToBeCloseTo)");
export const SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable: (self: ISteamMatchmaking, nSlotsAvailable: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmaking_AddRequestLobbyListFilterSlotsAvailable(ISteamMatchmaking * self, , int nSlotsAvailable)");
export const SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter: (self: ISteamMatchmaking, cMaxResults: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmaking_AddRequestLobbyListResultCountFilter(ISteamMatchmaking * self, , int cMaxResults)");
export const SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter: (self: ISteamMatchmaking, steamIDLobby: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmaking_AddRequestLobbyListCompatibleMembersFilter(ISteamMatchmaking * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamMatchmaking_GetLobbyByIndex: (self: ISteamMatchmaking, iLobby: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyByIndex(ISteamMatchmaking * self, , int iLobby)");
export const SteamAPI_ISteamMatchmaking_JoinLobby: (self: ISteamMatchmaking, steamIDLobby: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamMatchmaking_JoinLobby(ISteamMatchmaking * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamMatchmaking_LeaveLobby: (self: ISteamMatchmaking, steamIDLobby: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmaking_LeaveLobby(ISteamMatchmaking * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamMatchmaking_InviteUserToLobby: (self: ISteamMatchmaking, steamIDLobby: number, steamIDInvitee: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_InviteUserToLobby(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, uint64_steamid steamIDInvitee)");
export const SteamAPI_ISteamMatchmaking_GetNumLobbyMembers: (self: ISteamMatchmaking, steamIDLobby: number) => number = lib.cdecl("int SteamAPI_ISteamMatchmaking_GetNumLobbyMembers(ISteamMatchmaking * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex: (self: ISteamMatchmaking, steamIDLobby: number, iMember: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyMemberByIndex(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, int iMember)");
export const SteamAPI_ISteamMatchmaking_GetLobbyData: (self: ISteamMatchmaking, steamIDLobby: number, pchKey: string) => string = lib.cdecl("const char * SteamAPI_ISteamMatchmaking_GetLobbyData(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, const char * pchKey)");
export const SteamAPI_ISteamMatchmaking_SetLobbyData: (self: ISteamMatchmaking, steamIDLobby: number, pchKey: string, pchValue: string) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_SetLobbyData(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, const char * pchKey, const char * pchValue)");
export const SteamAPI_ISteamMatchmaking_GetLobbyDataCount: (self: ISteamMatchmaking, steamIDLobby: number) => number = lib.cdecl("int SteamAPI_ISteamMatchmaking_GetLobbyDataCount(ISteamMatchmaking * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex: (self: ISteamMatchmaking, steamIDLobby: number, iLobbyData: number, pchKey: [string], cchKeyBufferSize: number, pchValue: [string], cchValueBufferSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_GetLobbyDataByIndex(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, int iLobbyData, _Out_ char * pchKey, int cchKeyBufferSize, _Out_ char * pchValue, int cchValueBufferSize)");
export const SteamAPI_ISteamMatchmaking_DeleteLobbyData: (self: ISteamMatchmaking, steamIDLobby: number, pchKey: string) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_DeleteLobbyData(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, const char * pchKey)");
export const SteamAPI_ISteamMatchmaking_GetLobbyMemberData: (self: ISteamMatchmaking, steamIDLobby: number, steamIDUser: number, pchKey: string) => string = lib.cdecl("const char * SteamAPI_ISteamMatchmaking_GetLobbyMemberData(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, uint64_steamid steamIDUser, const char * pchKey)");
export const SteamAPI_ISteamMatchmaking_SetLobbyMemberData: (self: ISteamMatchmaking, steamIDLobby: number, pchKey: string, pchValue: string) => void = lib.cdecl("void SteamAPI_ISteamMatchmaking_SetLobbyMemberData(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, const char * pchKey, const char * pchValue)");
export const SteamAPI_ISteamMatchmaking_SendLobbyChatMsg: (self: ISteamMatchmaking, steamIDLobby: number, pvMsgBody: void, cubMsgBody: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_SendLobbyChatMsg(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, const void * pvMsgBody, int cubMsgBody)");
export const SteamAPI_ISteamMatchmaking_RequestLobbyData: (self: ISteamMatchmaking, steamIDLobby: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_RequestLobbyData(ISteamMatchmaking * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamMatchmaking_SetLobbyGameServer: (self: ISteamMatchmaking, steamIDLobby: number, unGameServerIP: number, unGameServerPort: number, steamIDGameServer: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmaking_SetLobbyGameServer(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, uint32 unGameServerIP, uint16 unGameServerPort, uint64_steamid steamIDGameServer)");
export const SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit: (self: ISteamMatchmaking, steamIDLobby: number, cMaxMembers: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_SetLobbyMemberLimit(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, int cMaxMembers)");
export const SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit: (self: ISteamMatchmaking, steamIDLobby: number) => number = lib.cdecl("int SteamAPI_ISteamMatchmaking_GetLobbyMemberLimit(ISteamMatchmaking * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamMatchmaking_SetLobbyJoinable: (self: ISteamMatchmaking, steamIDLobby: number, bLobbyJoinable: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_SetLobbyJoinable(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, bool bLobbyJoinable)");
export const SteamAPI_ISteamMatchmaking_GetLobbyOwner: (self: ISteamMatchmaking, steamIDLobby: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamMatchmaking_GetLobbyOwner(ISteamMatchmaking * self, , uint64_steamid steamIDLobby)");
export const SteamAPI_ISteamMatchmaking_SetLobbyOwner: (self: ISteamMatchmaking, steamIDLobby: number, steamIDNewOwner: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_SetLobbyOwner(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, uint64_steamid steamIDNewOwner)");
export const SteamAPI_ISteamMatchmaking_SetLinkedLobby: (self: ISteamMatchmaking, steamIDLobby: number, steamIDLobbyDependent: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmaking_SetLinkedLobby(ISteamMatchmaking * self, , uint64_steamid steamIDLobby, uint64_steamid steamIDLobbyDependent)");
interface ISteamMatchmakingServerListResponse { __brand: "ISteamMatchmakingServerListResponse" }
koffi.opaque("ISteamMatchmakingServerListResponse");
export const SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded: (self: ISteamMatchmakingServerListResponse, hRequest: Buffer, iServer: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingServerListResponse_ServerResponded(ISteamMatchmakingServerListResponse * self, , HServerListRequest hRequest, int iServer)");
export const SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond: (self: ISteamMatchmakingServerListResponse, hRequest: Buffer, iServer: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingServerListResponse_ServerFailedToRespond(ISteamMatchmakingServerListResponse * self, , HServerListRequest hRequest, int iServer)");
interface ISteamMatchmakingPingResponse { __brand: "ISteamMatchmakingPingResponse" }
koffi.opaque("ISteamMatchmakingPingResponse");
export const SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond: (self: ISteamMatchmakingPingResponse) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingPingResponse_ServerFailedToRespond(ISteamMatchmakingPingResponse * self)");
interface ISteamMatchmakingPlayersResponse { __brand: "ISteamMatchmakingPlayersResponse" }
koffi.opaque("ISteamMatchmakingPlayersResponse");
export const SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList: (self: ISteamMatchmakingPlayersResponse, pchName: string, nScore: number, flTimePlayed: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingPlayersResponse_AddPlayerToList(ISteamMatchmakingPlayersResponse * self, , const char * pchName, int nScore, float flTimePlayed)");
export const SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond: (self: ISteamMatchmakingPlayersResponse) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersFailedToRespond(ISteamMatchmakingPlayersResponse * self)");
export const SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete: (self: ISteamMatchmakingPlayersResponse) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingPlayersResponse_PlayersRefreshComplete(ISteamMatchmakingPlayersResponse * self)");
interface ISteamMatchmakingRulesResponse { __brand: "ISteamMatchmakingRulesResponse" }
koffi.opaque("ISteamMatchmakingRulesResponse");
export const SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded: (self: ISteamMatchmakingRulesResponse, pchRule: string, pchValue: string) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingRulesResponse_RulesResponded(ISteamMatchmakingRulesResponse * self, , const char * pchRule, const char * pchValue)");
export const SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond: (self: ISteamMatchmakingRulesResponse) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingRulesResponse_RulesFailedToRespond(ISteamMatchmakingRulesResponse * self)");
export const SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete: (self: ISteamMatchmakingRulesResponse) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingRulesResponse_RulesRefreshComplete(ISteamMatchmakingRulesResponse * self)");
interface ISteamMatchmakingServers { __brand: "ISteamMatchmakingServers" }
koffi.opaque("ISteamMatchmakingServers");
export const SteamAPI_SteamMatchmakingServers_v002: KoffiFunc<() => ISteamMatchmakingServers> = lib.cdecl("ISteamMatchmakingServers* SteamAPI_SteamMatchmakingServers_v002()");
export const SteamAPI_ISteamMatchmakingServers_ReleaseRequest: (self: ISteamMatchmakingServers, hServerListRequest: Buffer) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingServers_ReleaseRequest(ISteamMatchmakingServers * self, , HServerListRequest hServerListRequest)");
export const SteamAPI_ISteamMatchmakingServers_CancelQuery: (self: ISteamMatchmakingServers, hRequest: Buffer) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingServers_CancelQuery(ISteamMatchmakingServers * self, , HServerListRequest hRequest)");
export const SteamAPI_ISteamMatchmakingServers_RefreshQuery: (self: ISteamMatchmakingServers, hRequest: Buffer) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingServers_RefreshQuery(ISteamMatchmakingServers * self, , HServerListRequest hRequest)");
export const SteamAPI_ISteamMatchmakingServers_IsRefreshing: (self: ISteamMatchmakingServers, hRequest: Buffer) => boolean = lib.cdecl("bool SteamAPI_ISteamMatchmakingServers_IsRefreshing(ISteamMatchmakingServers * self, , HServerListRequest hRequest)");
export const SteamAPI_ISteamMatchmakingServers_GetServerCount: (self: ISteamMatchmakingServers, hRequest: Buffer) => number = lib.cdecl("int SteamAPI_ISteamMatchmakingServers_GetServerCount(ISteamMatchmakingServers * self, , HServerListRequest hRequest)");
export const SteamAPI_ISteamMatchmakingServers_RefreshServer: (self: ISteamMatchmakingServers, hRequest: Buffer, iServer: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingServers_RefreshServer(ISteamMatchmakingServers * self, , HServerListRequest hRequest, int iServer)");
export const SteamAPI_ISteamMatchmakingServers_CancelServerQuery: (self: ISteamMatchmakingServers, hServerQuery: number) => void = lib.cdecl("void SteamAPI_ISteamMatchmakingServers_CancelServerQuery(ISteamMatchmakingServers * self, , HServerQuery hServerQuery)");
interface ISteamGameSearch { __brand: "ISteamGameSearch" }
koffi.opaque("ISteamGameSearch");
export const SteamAPI_SteamGameSearch_v001: KoffiFunc<() => ISteamGameSearch> = lib.cdecl("ISteamGameSearch* SteamAPI_SteamGameSearch_v001()");
interface ISteamParties { __brand: "ISteamParties" }
koffi.opaque("ISteamParties");
export const SteamAPI_SteamParties_v002: KoffiFunc<() => ISteamParties> = lib.cdecl("ISteamParties* SteamAPI_SteamParties_v002()");
export const SteamAPI_ISteamParties_GetNumActiveBeacons: (self: ISteamParties) => number = lib.cdecl("uint32 SteamAPI_ISteamParties_GetNumActiveBeacons(ISteamParties * self)");
export const SteamAPI_ISteamParties_GetBeaconByIndex: (self: ISteamParties, unIndex: number) => number = lib.cdecl("PartyBeaconID_t SteamAPI_ISteamParties_GetBeaconByIndex(ISteamParties * self, , uint32 unIndex)");
export const SteamAPI_ISteamParties_JoinParty: (self: ISteamParties, ulBeaconID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamParties_JoinParty(ISteamParties * self, , PartyBeaconID_t ulBeaconID)");
export const SteamAPI_ISteamParties_GetNumAvailableBeaconLocations: (self: ISteamParties, puNumLocations: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamParties_GetNumAvailableBeaconLocations(ISteamParties * self, , _Out_ uint32 * puNumLocations)");
export const SteamAPI_ISteamParties_OnReservationCompleted: (self: ISteamParties, ulBeacon: number, steamIDUser: number) => void = lib.cdecl("void SteamAPI_ISteamParties_OnReservationCompleted(ISteamParties * self, , PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)");
export const SteamAPI_ISteamParties_CancelReservation: (self: ISteamParties, ulBeacon: number, steamIDUser: number) => void = lib.cdecl("void SteamAPI_ISteamParties_CancelReservation(ISteamParties * self, , PartyBeaconID_t ulBeacon, uint64_steamid steamIDUser)");
export const SteamAPI_ISteamParties_ChangeNumOpenSlots: (self: ISteamParties, ulBeacon: number, unOpenSlots: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamParties_ChangeNumOpenSlots(ISteamParties * self, , PartyBeaconID_t ulBeacon, uint32 unOpenSlots)");
export const SteamAPI_ISteamParties_DestroyBeacon: (self: ISteamParties, ulBeacon: number) => boolean = lib.cdecl("bool SteamAPI_ISteamParties_DestroyBeacon(ISteamParties * self, , PartyBeaconID_t ulBeacon)");
interface ISteamRemoteStorage { __brand: "ISteamRemoteStorage" }
koffi.opaque("ISteamRemoteStorage");
export const SteamAPI_SteamRemoteStorage_v016: KoffiFunc<() => ISteamRemoteStorage> = lib.cdecl("ISteamRemoteStorage* SteamAPI_SteamRemoteStorage_v016()");
export const SteamAPI_ISteamRemoteStorage_FileWrite: (self: ISteamRemoteStorage, pchFile: string, pvData: void, cubData: number) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_FileWrite(ISteamRemoteStorage * self, , const char * pchFile, const void * pvData, int32 cubData)");
export const SteamAPI_ISteamRemoteStorage_FileRead: (self: ISteamRemoteStorage, pchFile: string, pvData: [void], cubDataToRead: number) => number = lib.cdecl("int32 SteamAPI_ISteamRemoteStorage_FileRead(ISteamRemoteStorage * self, , const char * pchFile, _Out_ void * pvData, int32 cubDataToRead)");
export const SteamAPI_ISteamRemoteStorage_FileWriteAsync: (self: ISteamRemoteStorage, pchFile: string, pvData: void, cubData: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileWriteAsync(ISteamRemoteStorage * self, , const char * pchFile, const void * pvData, uint32 cubData)");
export const SteamAPI_ISteamRemoteStorage_FileReadAsync: (self: ISteamRemoteStorage, pchFile: string, nOffset: number, cubToRead: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileReadAsync(ISteamRemoteStorage * self, , const char * pchFile, uint32 nOffset, uint32 cubToRead)");
export const SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete: (self: ISteamRemoteStorage, hReadCall: number, pvBuffer: [void], cubToRead: number) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_FileReadAsyncComplete(ISteamRemoteStorage * self, , SteamAPICall_t hReadCall, _Out_ void * pvBuffer, uint32 cubToRead)");
export const SteamAPI_ISteamRemoteStorage_FileForget: (self: ISteamRemoteStorage, pchFile: string) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_FileForget(ISteamRemoteStorage * self, , const char * pchFile)");
export const SteamAPI_ISteamRemoteStorage_FileDelete: (self: ISteamRemoteStorage, pchFile: string) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_FileDelete(ISteamRemoteStorage * self, , const char * pchFile)");
export const SteamAPI_ISteamRemoteStorage_FileShare: (self: ISteamRemoteStorage, pchFile: string) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_FileShare(ISteamRemoteStorage * self, , const char * pchFile)");
export const SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen: (self: ISteamRemoteStorage, pchFile: string) => number = lib.cdecl("UGCFileWriteStreamHandle_t SteamAPI_ISteamRemoteStorage_FileWriteStreamOpen(ISteamRemoteStorage * self, , const char * pchFile)");
export const SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk: (self: ISteamRemoteStorage, writeHandle: number, pvData: void, cubData: number) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_FileWriteStreamWriteChunk(ISteamRemoteStorage * self, , UGCFileWriteStreamHandle_t writeHandle, const void * pvData, int32 cubData)");
export const SteamAPI_ISteamRemoteStorage_FileWriteStreamClose: (self: ISteamRemoteStorage, writeHandle: number) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_FileWriteStreamClose(ISteamRemoteStorage * self, , UGCFileWriteStreamHandle_t writeHandle)");
export const SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel: (self: ISteamRemoteStorage, writeHandle: number) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_FileWriteStreamCancel(ISteamRemoteStorage * self, , UGCFileWriteStreamHandle_t writeHandle)");
export const SteamAPI_ISteamRemoteStorage_FileExists: (self: ISteamRemoteStorage, pchFile: string) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_FileExists(ISteamRemoteStorage * self, , const char * pchFile)");
export const SteamAPI_ISteamRemoteStorage_FilePersisted: (self: ISteamRemoteStorage, pchFile: string) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_FilePersisted(ISteamRemoteStorage * self, , const char * pchFile)");
export const SteamAPI_ISteamRemoteStorage_GetFileSize: (self: ISteamRemoteStorage, pchFile: string) => number = lib.cdecl("int32 SteamAPI_ISteamRemoteStorage_GetFileSize(ISteamRemoteStorage * self, , const char * pchFile)");
export const SteamAPI_ISteamRemoteStorage_GetFileTimestamp: (self: ISteamRemoteStorage, pchFile: string) => number = lib.cdecl("int64 SteamAPI_ISteamRemoteStorage_GetFileTimestamp(ISteamRemoteStorage * self, , const char * pchFile)");
export const SteamAPI_ISteamRemoteStorage_GetFileCount: (self: ISteamRemoteStorage) => number = lib.cdecl("int32 SteamAPI_ISteamRemoteStorage_GetFileCount(ISteamRemoteStorage * self)");
export const SteamAPI_ISteamRemoteStorage_GetFileNameAndSize: (self: ISteamRemoteStorage, iFile: number, pnFileSizeInBytes: [number]) => string = lib.cdecl("const char * SteamAPI_ISteamRemoteStorage_GetFileNameAndSize(ISteamRemoteStorage * self, , int iFile, _Out_ int32 * pnFileSizeInBytes)");
export const SteamAPI_ISteamRemoteStorage_GetQuota: (self: ISteamRemoteStorage, pnTotalBytes: [number], puAvailableBytes: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_GetQuota(ISteamRemoteStorage * self, , _Out_ uint64 * pnTotalBytes, _Out_ uint64 * puAvailableBytes)");
export const SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount: (self: ISteamRemoteStorage) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForAccount(ISteamRemoteStorage * self)");
export const SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp: (self: ISteamRemoteStorage) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_IsCloudEnabledForApp(ISteamRemoteStorage * self)");
export const SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp: (self: ISteamRemoteStorage, bEnabled: boolean) => void = lib.cdecl("void SteamAPI_ISteamRemoteStorage_SetCloudEnabledForApp(ISteamRemoteStorage * self, , bool bEnabled)");
export const SteamAPI_ISteamRemoteStorage_UGCDownload: (self: ISteamRemoteStorage, hContent: number, unPriority: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownload(ISteamRemoteStorage * self, , UGCHandle_t hContent, uint32 unPriority)");
export const SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress: (self: ISteamRemoteStorage, hContent: number, pnBytesDownloaded: [number], pnBytesExpected: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_GetUGCDownloadProgress(ISteamRemoteStorage * self, , UGCHandle_t hContent, _Out_ int32 * pnBytesDownloaded, _Out_ int32 * pnBytesExpected)");
export const SteamAPI_ISteamRemoteStorage_GetCachedUGCCount: (self: ISteamRemoteStorage) => number = lib.cdecl("int32 SteamAPI_ISteamRemoteStorage_GetCachedUGCCount(ISteamRemoteStorage * self)");
export const SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle: (self: ISteamRemoteStorage, iCachedContent: number) => number = lib.cdecl("UGCHandle_t SteamAPI_ISteamRemoteStorage_GetCachedUGCHandle(ISteamRemoteStorage * self, , int32 iCachedContent)");
export const SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest: (self: ISteamRemoteStorage, unPublishedFileId: number) => number = lib.cdecl("PublishedFileUpdateHandle_t SteamAPI_ISteamRemoteStorage_CreatePublishedFileUpdateRequest(ISteamRemoteStorage * self, , PublishedFileId_t unPublishedFileId)");
export const SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile: (self: ISteamRemoteStorage, updateHandle: number, pchFile: string) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileFile(ISteamRemoteStorage * self, , PublishedFileUpdateHandle_t updateHandle, const char * pchFile)");
export const SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile: (self: ISteamRemoteStorage, updateHandle: number, pchPreviewFile: string) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFilePreviewFile(ISteamRemoteStorage * self, , PublishedFileUpdateHandle_t updateHandle, const char * pchPreviewFile)");
export const SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle: (self: ISteamRemoteStorage, updateHandle: number, pchTitle: string) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileTitle(ISteamRemoteStorage * self, , PublishedFileUpdateHandle_t updateHandle, const char * pchTitle)");
export const SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription: (self: ISteamRemoteStorage, updateHandle: number, pchDescription: string) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileDescription(ISteamRemoteStorage * self, , PublishedFileUpdateHandle_t updateHandle, const char * pchDescription)");
export const SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate: (self: ISteamRemoteStorage, updateHandle: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_CommitPublishedFileUpdate(ISteamRemoteStorage * self, , PublishedFileUpdateHandle_t updateHandle)");
export const SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails: (self: ISteamRemoteStorage, unPublishedFileId: number, unMaxSecondsOld: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedFileDetails(ISteamRemoteStorage * self, , PublishedFileId_t unPublishedFileId, uint32 unMaxSecondsOld)");
export const SteamAPI_ISteamRemoteStorage_DeletePublishedFile: (self: ISteamRemoteStorage, unPublishedFileId: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_DeletePublishedFile(ISteamRemoteStorage * self, , PublishedFileId_t unPublishedFileId)");
export const SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles: (self: ISteamRemoteStorage, unStartIndex: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserPublishedFiles(ISteamRemoteStorage * self, , uint32 unStartIndex)");
export const SteamAPI_ISteamRemoteStorage_SubscribePublishedFile: (self: ISteamRemoteStorage, unPublishedFileId: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_SubscribePublishedFile(ISteamRemoteStorage * self, , PublishedFileId_t unPublishedFileId)");
export const SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles: (self: ISteamRemoteStorage, unStartIndex: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_EnumerateUserSubscribedFiles(ISteamRemoteStorage * self, , uint32 unStartIndex)");
export const SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile: (self: ISteamRemoteStorage, unPublishedFileId: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_UnsubscribePublishedFile(ISteamRemoteStorage * self, , PublishedFileId_t unPublishedFileId)");
export const SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription: (self: ISteamRemoteStorage, updateHandle: number, pchChangeDescription: string) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_UpdatePublishedFileSetChangeDescription(ISteamRemoteStorage * self, , PublishedFileUpdateHandle_t updateHandle, const char * pchChangeDescription)");
export const SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails: (self: ISteamRemoteStorage, unPublishedFileId: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetPublishedItemVoteDetails(ISteamRemoteStorage * self, , PublishedFileId_t unPublishedFileId)");
export const SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote: (self: ISteamRemoteStorage, unPublishedFileId: number, bVoteUp: boolean) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_UpdateUserPublishedItemVote(ISteamRemoteStorage * self, , PublishedFileId_t unPublishedFileId, bool bVoteUp)");
export const SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails: (self: ISteamRemoteStorage, unPublishedFileId: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_GetUserPublishedItemVoteDetails(ISteamRemoteStorage * self, , PublishedFileId_t unPublishedFileId)");
export const SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation: (self: ISteamRemoteStorage, hContent: number, pchLocation: string, unPriority: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamRemoteStorage_UGCDownloadToLocation(ISteamRemoteStorage * self, , UGCHandle_t hContent, const char * pchLocation, uint32 unPriority)");
export const SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount: (self: ISteamRemoteStorage) => number = lib.cdecl("int32 SteamAPI_ISteamRemoteStorage_GetLocalFileChangeCount(ISteamRemoteStorage * self)");
export const SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch: (self: ISteamRemoteStorage) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_BeginFileWriteBatch(ISteamRemoteStorage * self)");
export const SteamAPI_ISteamRemoteStorage_EndFileWriteBatch: (self: ISteamRemoteStorage) => boolean = lib.cdecl("bool SteamAPI_ISteamRemoteStorage_EndFileWriteBatch(ISteamRemoteStorage * self)");
interface ISteamUserStats { __brand: "ISteamUserStats" }
koffi.opaque("ISteamUserStats");
export const SteamAPI_SteamUserStats_v012: KoffiFunc<() => ISteamUserStats> = lib.cdecl("ISteamUserStats* SteamAPI_SteamUserStats_v012()");
export const SteamAPI_ISteamUserStats_RequestCurrentStats: (self: ISteamUserStats) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_RequestCurrentStats(ISteamUserStats * self)");
export const SteamAPI_ISteamUserStats_GetStatInt32: (self: ISteamUserStats, pchName: string, pData: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetStatInt32(ISteamUserStats * self, , const char * pchName, _Out_ int32 * pData)");
export const SteamAPI_ISteamUserStats_GetStatFloat: (self: ISteamUserStats, pchName: string, pData: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetStatFloat(ISteamUserStats * self, , const char * pchName, _Out_ float * pData)");
export const SteamAPI_ISteamUserStats_SetStatInt32: (self: ISteamUserStats, pchName: string, nData: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_SetStatInt32(ISteamUserStats * self, , const char * pchName, int32 nData)");
export const SteamAPI_ISteamUserStats_SetStatFloat: (self: ISteamUserStats, pchName: string, fData: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_SetStatFloat(ISteamUserStats * self, , const char * pchName, float fData)");
export const SteamAPI_ISteamUserStats_UpdateAvgRateStat: (self: ISteamUserStats, pchName: string, flCountThisSession: number, dSessionLength: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_UpdateAvgRateStat(ISteamUserStats * self, , const char * pchName, float flCountThisSession, double dSessionLength)");
export const SteamAPI_ISteamUserStats_GetAchievement: (self: ISteamUserStats, pchName: string, pbAchieved: [boolean]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetAchievement(ISteamUserStats * self, , const char * pchName, _Out_ bool * pbAchieved)");
export const SteamAPI_ISteamUserStats_SetAchievement: (self: ISteamUserStats, pchName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_SetAchievement(ISteamUserStats * self, , const char * pchName)");
export const SteamAPI_ISteamUserStats_ClearAchievement: (self: ISteamUserStats, pchName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_ClearAchievement(ISteamUserStats * self, , const char * pchName)");
export const SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime: (self: ISteamUserStats, pchName: string, pbAchieved: [boolean], punUnlockTime: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetAchievementAndUnlockTime(ISteamUserStats * self, , const char * pchName, _Out_ bool * pbAchieved, _Out_ uint32 * punUnlockTime)");
export const SteamAPI_ISteamUserStats_StoreStats: (self: ISteamUserStats) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_StoreStats(ISteamUserStats * self)");
export const SteamAPI_ISteamUserStats_GetAchievementIcon: (self: ISteamUserStats, pchName: string) => number = lib.cdecl("int SteamAPI_ISteamUserStats_GetAchievementIcon(ISteamUserStats * self, , const char * pchName)");
export const SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute: (self: ISteamUserStats, pchName: string, pchKey: string) => string = lib.cdecl("const char * SteamAPI_ISteamUserStats_GetAchievementDisplayAttribute(ISteamUserStats * self, , const char * pchName, const char * pchKey)");
export const SteamAPI_ISteamUserStats_IndicateAchievementProgress: (self: ISteamUserStats, pchName: string, nCurProgress: number, nMaxProgress: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_IndicateAchievementProgress(ISteamUserStats * self, , const char * pchName, uint32 nCurProgress, uint32 nMaxProgress)");
export const SteamAPI_ISteamUserStats_GetNumAchievements: (self: ISteamUserStats) => number = lib.cdecl("uint32 SteamAPI_ISteamUserStats_GetNumAchievements(ISteamUserStats * self)");
export const SteamAPI_ISteamUserStats_GetAchievementName: (self: ISteamUserStats, iAchievement: number) => string = lib.cdecl("const char * SteamAPI_ISteamUserStats_GetAchievementName(ISteamUserStats * self, , uint32 iAchievement)");
export const SteamAPI_ISteamUserStats_RequestUserStats: (self: ISteamUserStats, steamIDUser: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUserStats_RequestUserStats(ISteamUserStats * self, , uint64_steamid steamIDUser)");
export const SteamAPI_ISteamUserStats_GetUserStatInt32: (self: ISteamUserStats, steamIDUser: number, pchName: string, pData: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetUserStatInt32(ISteamUserStats * self, , uint64_steamid steamIDUser, const char * pchName, _Out_ int32 * pData)");
export const SteamAPI_ISteamUserStats_GetUserStatFloat: (self: ISteamUserStats, steamIDUser: number, pchName: string, pData: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetUserStatFloat(ISteamUserStats * self, , uint64_steamid steamIDUser, const char * pchName, _Out_ float * pData)");
export const SteamAPI_ISteamUserStats_GetUserAchievement: (self: ISteamUserStats, steamIDUser: number, pchName: string, pbAchieved: [boolean]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetUserAchievement(ISteamUserStats * self, , uint64_steamid steamIDUser, const char * pchName, _Out_ bool * pbAchieved)");
export const SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime: (self: ISteamUserStats, steamIDUser: number, pchName: string, pbAchieved: [boolean], punUnlockTime: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetUserAchievementAndUnlockTime(ISteamUserStats * self, , uint64_steamid steamIDUser, const char * pchName, _Out_ bool * pbAchieved, _Out_ uint32 * punUnlockTime)");
export const SteamAPI_ISteamUserStats_ResetAllStats: (self: ISteamUserStats, bAchievementsToo: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_ResetAllStats(ISteamUserStats * self, , bool bAchievementsToo)");
export const SteamAPI_ISteamUserStats_FindLeaderboard: (self: ISteamUserStats, pchLeaderboardName: string) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUserStats_FindLeaderboard(ISteamUserStats * self, , const char * pchLeaderboardName)");
export const SteamAPI_ISteamUserStats_GetLeaderboardName: (self: ISteamUserStats, hSteamLeaderboard: number) => string = lib.cdecl("const char * SteamAPI_ISteamUserStats_GetLeaderboardName(ISteamUserStats * self, , SteamLeaderboard_t hSteamLeaderboard)");
export const SteamAPI_ISteamUserStats_GetLeaderboardEntryCount: (self: ISteamUserStats, hSteamLeaderboard: number) => number = lib.cdecl("int SteamAPI_ISteamUserStats_GetLeaderboardEntryCount(ISteamUserStats * self, , SteamLeaderboard_t hSteamLeaderboard)");
export const SteamAPI_ISteamUserStats_AttachLeaderboardUGC: (self: ISteamUserStats, hSteamLeaderboard: number, hUGC: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUserStats_AttachLeaderboardUGC(ISteamUserStats * self, , SteamLeaderboard_t hSteamLeaderboard, UGCHandle_t hUGC)");
export const SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers: (self: ISteamUserStats) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUserStats_GetNumberOfCurrentPlayers(ISteamUserStats * self)");
export const SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages: (self: ISteamUserStats) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalAchievementPercentages(ISteamUserStats * self)");
export const SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo: (self: ISteamUserStats, pchName: [string], unNameBufLen: number, pflPercent: [number], pbAchieved: [boolean]) => number = lib.cdecl("int SteamAPI_ISteamUserStats_GetMostAchievedAchievementInfo(ISteamUserStats * self, , _Out_ char * pchName, uint32 unNameBufLen, _Out_ float * pflPercent, _Out_ bool * pbAchieved)");
export const SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo: (self: ISteamUserStats, iIteratorPrevious: number, pchName: [string], unNameBufLen: number, pflPercent: [number], pbAchieved: [boolean]) => number = lib.cdecl("int SteamAPI_ISteamUserStats_GetNextMostAchievedAchievementInfo(ISteamUserStats * self, , int iIteratorPrevious, _Out_ char * pchName, uint32 unNameBufLen, _Out_ float * pflPercent, _Out_ bool * pbAchieved)");
export const SteamAPI_ISteamUserStats_GetAchievementAchievedPercent: (self: ISteamUserStats, pchName: string, pflPercent: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetAchievementAchievedPercent(ISteamUserStats * self, , const char * pchName, _Out_ float * pflPercent)");
export const SteamAPI_ISteamUserStats_RequestGlobalStats: (self: ISteamUserStats, nHistoryDays: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUserStats_RequestGlobalStats(ISteamUserStats * self, , int nHistoryDays)");
export const SteamAPI_ISteamUserStats_GetGlobalStatInt64: (self: ISteamUserStats, pchStatName: string, pData: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetGlobalStatInt64(ISteamUserStats * self, , const char * pchStatName, _Out_ int64 * pData)");
export const SteamAPI_ISteamUserStats_GetGlobalStatDouble: (self: ISteamUserStats, pchStatName: string, pData: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetGlobalStatDouble(ISteamUserStats * self, , const char * pchStatName, _Out_ double * pData)");
export const SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64: (self: ISteamUserStats, pchStatName: string, pData: [number], cubData: number) => number = lib.cdecl("int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryInt64(ISteamUserStats * self, , const char * pchStatName, _Out_ int64 * pData, uint32 cubData)");
export const SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble: (self: ISteamUserStats, pchStatName: string, pData: [number], cubData: number) => number = lib.cdecl("int32 SteamAPI_ISteamUserStats_GetGlobalStatHistoryDouble(ISteamUserStats * self, , const char * pchStatName, _Out_ double * pData, uint32 cubData)");
export const SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32: (self: ISteamUserStats, pchName: string, pnMinProgress: [number], pnMaxProgress: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsInt32(ISteamUserStats * self, , const char * pchName, _Out_ int32 * pnMinProgress, _Out_ int32 * pnMaxProgress)");
export const SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat: (self: ISteamUserStats, pchName: string, pfMinProgress: [number], pfMaxProgress: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUserStats_GetAchievementProgressLimitsFloat(ISteamUserStats * self, , const char * pchName, _Out_ float * pfMinProgress, _Out_ float * pfMaxProgress)");
interface ISteamApps { __brand: "ISteamApps" }
koffi.opaque("ISteamApps");
export const SteamAPI_SteamApps_v008: KoffiFunc<() => ISteamApps> = lib.cdecl("ISteamApps* SteamAPI_SteamApps_v008()");
export const SteamAPI_ISteamApps_BIsSubscribed: (self: ISteamApps) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsSubscribed(ISteamApps * self)");
export const SteamAPI_ISteamApps_BIsLowViolence: (self: ISteamApps) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsLowViolence(ISteamApps * self)");
export const SteamAPI_ISteamApps_BIsCybercafe: (self: ISteamApps) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsCybercafe(ISteamApps * self)");
export const SteamAPI_ISteamApps_BIsVACBanned: (self: ISteamApps) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsVACBanned(ISteamApps * self)");
export const SteamAPI_ISteamApps_GetCurrentGameLanguage: (self: ISteamApps) => string = lib.cdecl("const char * SteamAPI_ISteamApps_GetCurrentGameLanguage(ISteamApps * self)");
export const SteamAPI_ISteamApps_GetAvailableGameLanguages: (self: ISteamApps) => string = lib.cdecl("const char * SteamAPI_ISteamApps_GetAvailableGameLanguages(ISteamApps * self)");
export const SteamAPI_ISteamApps_BIsSubscribedApp: (self: ISteamApps, appID: number) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsSubscribedApp(ISteamApps * self, , AppId_t appID)");
export const SteamAPI_ISteamApps_BIsDlcInstalled: (self: ISteamApps, appID: number) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsDlcInstalled(ISteamApps * self, , AppId_t appID)");
export const SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime: (self: ISteamApps, nAppID: number) => number = lib.cdecl("uint32 SteamAPI_ISteamApps_GetEarliestPurchaseUnixTime(ISteamApps * self, , AppId_t nAppID)");
export const SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend: (self: ISteamApps) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsSubscribedFromFreeWeekend(ISteamApps * self)");
export const SteamAPI_ISteamApps_GetDLCCount: (self: ISteamApps) => number = lib.cdecl("int SteamAPI_ISteamApps_GetDLCCount(ISteamApps * self)");
export const SteamAPI_ISteamApps_BGetDLCDataByIndex: (self: ISteamApps, iDLC: number, pAppID: [number], pbAvailable: [boolean], pchName: [string], cchNameBufferSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BGetDLCDataByIndex(ISteamApps * self, , int iDLC, _Out_ AppId_t * pAppID, _Out_ bool * pbAvailable, _Out_ char * pchName, int cchNameBufferSize)");
export const SteamAPI_ISteamApps_InstallDLC: (self: ISteamApps, nAppID: number) => void = lib.cdecl("void SteamAPI_ISteamApps_InstallDLC(ISteamApps * self, , AppId_t nAppID)");
export const SteamAPI_ISteamApps_UninstallDLC: (self: ISteamApps, nAppID: number) => void = lib.cdecl("void SteamAPI_ISteamApps_UninstallDLC(ISteamApps * self, , AppId_t nAppID)");
export const SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey: (self: ISteamApps, nAppID: number) => void = lib.cdecl("void SteamAPI_ISteamApps_RequestAppProofOfPurchaseKey(ISteamApps * self, , AppId_t nAppID)");
export const SteamAPI_ISteamApps_GetCurrentBetaName: (self: ISteamApps, pchName: [string], cchNameBufferSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_GetCurrentBetaName(ISteamApps * self, , _Out_ char * pchName, int cchNameBufferSize)");
export const SteamAPI_ISteamApps_MarkContentCorrupt: (self: ISteamApps, bMissingFilesOnly: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_MarkContentCorrupt(ISteamApps * self, , bool bMissingFilesOnly)");
export const SteamAPI_ISteamApps_GetInstalledDepots: (self: ISteamApps, appID: number, pvecDepots: [number], cMaxDepots: number) => number = lib.cdecl("uint32 SteamAPI_ISteamApps_GetInstalledDepots(ISteamApps * self, , AppId_t appID, _Out_ DepotId_t * pvecDepots, uint32 cMaxDepots)");
export const SteamAPI_ISteamApps_GetAppInstallDir: (self: ISteamApps, appID: number, pchFolder: [string], cchFolderBufferSize: number) => number = lib.cdecl("uint32 SteamAPI_ISteamApps_GetAppInstallDir(ISteamApps * self, , AppId_t appID, _Out_ char * pchFolder, uint32 cchFolderBufferSize)");
export const SteamAPI_ISteamApps_BIsAppInstalled: (self: ISteamApps, appID: number) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsAppInstalled(ISteamApps * self, , AppId_t appID)");
export const SteamAPI_ISteamApps_GetAppOwner: (self: ISteamApps) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamApps_GetAppOwner(ISteamApps * self)");
export const SteamAPI_ISteamApps_GetLaunchQueryParam: (self: ISteamApps, pchKey: string) => string = lib.cdecl("const char * SteamAPI_ISteamApps_GetLaunchQueryParam(ISteamApps * self, , const char * pchKey)");
export const SteamAPI_ISteamApps_GetDlcDownloadProgress: (self: ISteamApps, nAppID: number, punBytesDownloaded: [number], punBytesTotal: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_GetDlcDownloadProgress(ISteamApps * self, , AppId_t nAppID, _Out_ uint64 * punBytesDownloaded, _Out_ uint64 * punBytesTotal)");
export const SteamAPI_ISteamApps_GetAppBuildId: (self: ISteamApps) => number = lib.cdecl("int SteamAPI_ISteamApps_GetAppBuildId(ISteamApps * self)");
export const SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys: (self: ISteamApps) => void = lib.cdecl("void SteamAPI_ISteamApps_RequestAllProofOfPurchaseKeys(ISteamApps * self)");
export const SteamAPI_ISteamApps_GetFileDetails: (self: ISteamApps, pszFileName: string) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamApps_GetFileDetails(ISteamApps * self, , const char * pszFileName)");
export const SteamAPI_ISteamApps_GetLaunchCommandLine: (self: ISteamApps, pszCommandLine: [string], cubCommandLine: number) => number = lib.cdecl("int SteamAPI_ISteamApps_GetLaunchCommandLine(ISteamApps * self, , _Out_ char * pszCommandLine, int cubCommandLine)");
export const SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing: (self: ISteamApps) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsSubscribedFromFamilySharing(ISteamApps * self)");
export const SteamAPI_ISteamApps_BIsTimedTrial: (self: ISteamApps, punSecondsAllowed: [number], punSecondsPlayed: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamApps_BIsTimedTrial(ISteamApps * self, , _Out_ uint32 * punSecondsAllowed, _Out_ uint32 * punSecondsPlayed)");
interface ISteamNetworking { __brand: "ISteamNetworking" }
koffi.opaque("ISteamNetworking");
export const SteamAPI_SteamNetworking_v006: KoffiFunc<() => ISteamNetworking> = lib.cdecl("ISteamNetworking* SteamAPI_SteamNetworking_v006()");
export const SteamAPI_SteamGameServerNetworking_v006: KoffiFunc<() => ISteamNetworking> = lib.cdecl("ISteamNetworking* SteamAPI_SteamGameServerNetworking_v006()");
export const SteamAPI_ISteamNetworking_IsP2PPacketAvailable: (self: ISteamNetworking, pcubMsgSize: [number], nChannel: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_IsP2PPacketAvailable(ISteamNetworking * self, , _Out_ uint32 * pcubMsgSize, int nChannel)");
export const SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser: (self: ISteamNetworking, steamIDRemote: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_AcceptP2PSessionWithUser(ISteamNetworking * self, , uint64_steamid steamIDRemote)");
export const SteamAPI_ISteamNetworking_CloseP2PSessionWithUser: (self: ISteamNetworking, steamIDRemote: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_CloseP2PSessionWithUser(ISteamNetworking * self, , uint64_steamid steamIDRemote)");
export const SteamAPI_ISteamNetworking_CloseP2PChannelWithUser: (self: ISteamNetworking, steamIDRemote: number, nChannel: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_CloseP2PChannelWithUser(ISteamNetworking * self, , uint64_steamid steamIDRemote, int nChannel)");
export const SteamAPI_ISteamNetworking_AllowP2PPacketRelay: (self: ISteamNetworking, bAllow: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_AllowP2PPacketRelay(ISteamNetworking * self, , bool bAllow)");
export const SteamAPI_ISteamNetworking_CreateP2PConnectionSocket: (self: ISteamNetworking, steamIDTarget: number, nVirtualPort: number, nTimeoutSec: number, bAllowUseOfPacketRelay: boolean) => number = lib.cdecl("SNetSocket_t SteamAPI_ISteamNetworking_CreateP2PConnectionSocket(ISteamNetworking * self, , uint64_steamid steamIDTarget, int nVirtualPort, int nTimeoutSec, bool bAllowUseOfPacketRelay)");
export const SteamAPI_ISteamNetworking_DestroySocket: (self: ISteamNetworking, hSocket: number, bNotifyRemoteEnd: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_DestroySocket(ISteamNetworking * self, , SNetSocket_t hSocket, bool bNotifyRemoteEnd)");
export const SteamAPI_ISteamNetworking_DestroyListenSocket: (self: ISteamNetworking, hSocket: number, bNotifyRemoteEnd: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_DestroyListenSocket(ISteamNetworking * self, , SNetListenSocket_t hSocket, bool bNotifyRemoteEnd)");
export const SteamAPI_ISteamNetworking_SendDataOnSocket: (self: ISteamNetworking, hSocket: number, pubData: [void], cubData: number, bReliable: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_SendDataOnSocket(ISteamNetworking * self, , SNetSocket_t hSocket, _Out_ void * pubData, uint32 cubData, bool bReliable)");
export const SteamAPI_ISteamNetworking_IsDataAvailableOnSocket: (self: ISteamNetworking, hSocket: number, pcubMsgSize: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_IsDataAvailableOnSocket(ISteamNetworking * self, , SNetSocket_t hSocket, _Out_ uint32 * pcubMsgSize)");
export const SteamAPI_ISteamNetworking_RetrieveDataFromSocket: (self: ISteamNetworking, hSocket: number, pubDest: [void], cubDest: number, pcubMsgSize: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_RetrieveDataFromSocket(ISteamNetworking * self, , SNetSocket_t hSocket, _Out_ void * pubDest, uint32 cubDest, _Out_ uint32 * pcubMsgSize)");
export const SteamAPI_ISteamNetworking_IsDataAvailable: (self: ISteamNetworking, hListenSocket: number, pcubMsgSize: [number], phSocket: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_IsDataAvailable(ISteamNetworking * self, , SNetListenSocket_t hListenSocket, _Out_ uint32 * pcubMsgSize, _Out_ SNetSocket_t * phSocket)");
export const SteamAPI_ISteamNetworking_RetrieveData: (self: ISteamNetworking, hListenSocket: number, pubDest: [void], cubDest: number, pcubMsgSize: [number], phSocket: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworking_RetrieveData(ISteamNetworking * self, , SNetListenSocket_t hListenSocket, _Out_ void * pubDest, uint32 cubDest, _Out_ uint32 * pcubMsgSize, _Out_ SNetSocket_t * phSocket)");
export const SteamAPI_ISteamNetworking_GetMaxPacketSize: (self: ISteamNetworking, hSocket: number) => number = lib.cdecl("int SteamAPI_ISteamNetworking_GetMaxPacketSize(ISteamNetworking * self, , SNetSocket_t hSocket)");
interface ISteamScreenshots { __brand: "ISteamScreenshots" }
koffi.opaque("ISteamScreenshots");
export const SteamAPI_SteamScreenshots_v003: KoffiFunc<() => ISteamScreenshots> = lib.cdecl("ISteamScreenshots* SteamAPI_SteamScreenshots_v003()");
export const SteamAPI_ISteamScreenshots_WriteScreenshot: (self: ISteamScreenshots, pubRGB: [void], cubRGB: number, nWidth: number, nHeight: number) => number = lib.cdecl("ScreenshotHandle SteamAPI_ISteamScreenshots_WriteScreenshot(ISteamScreenshots * self, , _Out_ void * pubRGB, uint32 cubRGB, int nWidth, int nHeight)");
export const SteamAPI_ISteamScreenshots_AddScreenshotToLibrary: (self: ISteamScreenshots, pchFilename: string, pchThumbnailFilename: string, nWidth: number, nHeight: number) => number = lib.cdecl("ScreenshotHandle SteamAPI_ISteamScreenshots_AddScreenshotToLibrary(ISteamScreenshots * self, , const char * pchFilename, const char * pchThumbnailFilename, int nWidth, int nHeight)");
export const SteamAPI_ISteamScreenshots_TriggerScreenshot: (self: ISteamScreenshots) => void = lib.cdecl("void SteamAPI_ISteamScreenshots_TriggerScreenshot(ISteamScreenshots * self)");
export const SteamAPI_ISteamScreenshots_HookScreenshots: (self: ISteamScreenshots, bHook: boolean) => void = lib.cdecl("void SteamAPI_ISteamScreenshots_HookScreenshots(ISteamScreenshots * self, , bool bHook)");
export const SteamAPI_ISteamScreenshots_SetLocation: (self: ISteamScreenshots, hScreenshot: number, pchLocation: string) => boolean = lib.cdecl("bool SteamAPI_ISteamScreenshots_SetLocation(ISteamScreenshots * self, , ScreenshotHandle hScreenshot, const char * pchLocation)");
export const SteamAPI_ISteamScreenshots_TagUser: (self: ISteamScreenshots, hScreenshot: number, steamID: number) => boolean = lib.cdecl("bool SteamAPI_ISteamScreenshots_TagUser(ISteamScreenshots * self, , ScreenshotHandle hScreenshot, uint64_steamid steamID)");
export const SteamAPI_ISteamScreenshots_TagPublishedFile: (self: ISteamScreenshots, hScreenshot: number, unPublishedFileID: number) => boolean = lib.cdecl("bool SteamAPI_ISteamScreenshots_TagPublishedFile(ISteamScreenshots * self, , ScreenshotHandle hScreenshot, PublishedFileId_t unPublishedFileID)");
export const SteamAPI_ISteamScreenshots_IsScreenshotsHooked: (self: ISteamScreenshots) => boolean = lib.cdecl("bool SteamAPI_ISteamScreenshots_IsScreenshotsHooked(ISteamScreenshots * self)");
interface ISteamMusic { __brand: "ISteamMusic" }
koffi.opaque("ISteamMusic");
export const SteamAPI_SteamMusic_v001: KoffiFunc<() => ISteamMusic> = lib.cdecl("ISteamMusic* SteamAPI_SteamMusic_v001()");
export const SteamAPI_ISteamMusic_BIsEnabled: (self: ISteamMusic) => boolean = lib.cdecl("bool SteamAPI_ISteamMusic_BIsEnabled(ISteamMusic * self)");
export const SteamAPI_ISteamMusic_BIsPlaying: (self: ISteamMusic) => boolean = lib.cdecl("bool SteamAPI_ISteamMusic_BIsPlaying(ISteamMusic * self)");
export const SteamAPI_ISteamMusic_Play: (self: ISteamMusic) => void = lib.cdecl("void SteamAPI_ISteamMusic_Play(ISteamMusic * self)");
export const SteamAPI_ISteamMusic_Pause: (self: ISteamMusic) => void = lib.cdecl("void SteamAPI_ISteamMusic_Pause(ISteamMusic * self)");
export const SteamAPI_ISteamMusic_PlayPrevious: (self: ISteamMusic) => void = lib.cdecl("void SteamAPI_ISteamMusic_PlayPrevious(ISteamMusic * self)");
export const SteamAPI_ISteamMusic_PlayNext: (self: ISteamMusic) => void = lib.cdecl("void SteamAPI_ISteamMusic_PlayNext(ISteamMusic * self)");
export const SteamAPI_ISteamMusic_SetVolume: (self: ISteamMusic, flVolume: number) => void = lib.cdecl("void SteamAPI_ISteamMusic_SetVolume(ISteamMusic * self, , float flVolume)");
export const SteamAPI_ISteamMusic_GetVolume: (self: ISteamMusic) => number = lib.cdecl("float SteamAPI_ISteamMusic_GetVolume(ISteamMusic * self)");
interface ISteamMusicRemote { __brand: "ISteamMusicRemote" }
koffi.opaque("ISteamMusicRemote");
export const SteamAPI_SteamMusicRemote_v001: KoffiFunc<() => ISteamMusicRemote> = lib.cdecl("ISteamMusicRemote* SteamAPI_SteamMusicRemote_v001()");
export const SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote: (self: ISteamMusicRemote, pchName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_RegisterSteamMusicRemote(ISteamMusicRemote * self, , const char * pchName)");
export const SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_DeregisterSteamMusicRemote(ISteamMusicRemote * self)");
export const SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_BIsCurrentMusicRemote(ISteamMusicRemote * self)");
export const SteamAPI_ISteamMusicRemote_BActivationSuccess: (self: ISteamMusicRemote, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_BActivationSuccess(ISteamMusicRemote * self, , bool bValue)");
export const SteamAPI_ISteamMusicRemote_SetDisplayName: (self: ISteamMusicRemote, pchDisplayName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_SetDisplayName(ISteamMusicRemote * self, , const char * pchDisplayName)");
export const SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64: (self: ISteamMusicRemote, pvBuffer: [void], cbBufferLength: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_SetPNGIcon_64x64(ISteamMusicRemote * self, , _Out_ void * pvBuffer, uint32 cbBufferLength)");
export const SteamAPI_ISteamMusicRemote_EnablePlayPrevious: (self: ISteamMusicRemote, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_EnablePlayPrevious(ISteamMusicRemote * self, , bool bValue)");
export const SteamAPI_ISteamMusicRemote_EnablePlayNext: (self: ISteamMusicRemote, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_EnablePlayNext(ISteamMusicRemote * self, , bool bValue)");
export const SteamAPI_ISteamMusicRemote_EnableShuffled: (self: ISteamMusicRemote, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_EnableShuffled(ISteamMusicRemote * self, , bool bValue)");
export const SteamAPI_ISteamMusicRemote_EnableLooped: (self: ISteamMusicRemote, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_EnableLooped(ISteamMusicRemote * self, , bool bValue)");
export const SteamAPI_ISteamMusicRemote_EnableQueue: (self: ISteamMusicRemote, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_EnableQueue(ISteamMusicRemote * self, , bool bValue)");
export const SteamAPI_ISteamMusicRemote_EnablePlaylists: (self: ISteamMusicRemote, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_EnablePlaylists(ISteamMusicRemote * self, , bool bValue)");
export const SteamAPI_ISteamMusicRemote_UpdateShuffled: (self: ISteamMusicRemote, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_UpdateShuffled(ISteamMusicRemote * self, , bool bValue)");
export const SteamAPI_ISteamMusicRemote_UpdateLooped: (self: ISteamMusicRemote, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_UpdateLooped(ISteamMusicRemote * self, , bool bValue)");
export const SteamAPI_ISteamMusicRemote_UpdateVolume: (self: ISteamMusicRemote, flValue: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_UpdateVolume(ISteamMusicRemote * self, , float flValue)");
export const SteamAPI_ISteamMusicRemote_CurrentEntryWillChange: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_CurrentEntryWillChange(ISteamMusicRemote * self)");
export const SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable: (self: ISteamMusicRemote, bAvailable: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_CurrentEntryIsAvailable(ISteamMusicRemote * self, , bool bAvailable)");
export const SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText: (self: ISteamMusicRemote, pchText: string) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryText(ISteamMusicRemote * self, , const char * pchText)");
export const SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds: (self: ISteamMusicRemote, nValue: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryElapsedSeconds(ISteamMusicRemote * self, , int nValue)");
export const SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt: (self: ISteamMusicRemote, pvBuffer: [void], cbBufferLength: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_UpdateCurrentEntryCoverArt(ISteamMusicRemote * self, , _Out_ void * pvBuffer, uint32 cbBufferLength)");
export const SteamAPI_ISteamMusicRemote_CurrentEntryDidChange: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_CurrentEntryDidChange(ISteamMusicRemote * self)");
export const SteamAPI_ISteamMusicRemote_QueueWillChange: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_QueueWillChange(ISteamMusicRemote * self)");
export const SteamAPI_ISteamMusicRemote_ResetQueueEntries: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_ResetQueueEntries(ISteamMusicRemote * self)");
export const SteamAPI_ISteamMusicRemote_SetQueueEntry: (self: ISteamMusicRemote, nID: number, nPosition: number, pchEntryText: string) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_SetQueueEntry(ISteamMusicRemote * self, , int nID, int nPosition, const char * pchEntryText)");
export const SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry: (self: ISteamMusicRemote, nID: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_SetCurrentQueueEntry(ISteamMusicRemote * self, , int nID)");
export const SteamAPI_ISteamMusicRemote_QueueDidChange: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_QueueDidChange(ISteamMusicRemote * self)");
export const SteamAPI_ISteamMusicRemote_PlaylistWillChange: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_PlaylistWillChange(ISteamMusicRemote * self)");
export const SteamAPI_ISteamMusicRemote_ResetPlaylistEntries: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_ResetPlaylistEntries(ISteamMusicRemote * self)");
export const SteamAPI_ISteamMusicRemote_SetPlaylistEntry: (self: ISteamMusicRemote, nID: number, nPosition: number, pchEntryText: string) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_SetPlaylistEntry(ISteamMusicRemote * self, , int nID, int nPosition, const char * pchEntryText)");
export const SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry: (self: ISteamMusicRemote, nID: number) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_SetCurrentPlaylistEntry(ISteamMusicRemote * self, , int nID)");
export const SteamAPI_ISteamMusicRemote_PlaylistDidChange: (self: ISteamMusicRemote) => boolean = lib.cdecl("bool SteamAPI_ISteamMusicRemote_PlaylistDidChange(ISteamMusicRemote * self)");
interface ISteamHTTP { __brand: "ISteamHTTP" }
koffi.opaque("ISteamHTTP");
export const SteamAPI_SteamHTTP_v003: KoffiFunc<() => ISteamHTTP> = lib.cdecl("ISteamHTTP* SteamAPI_SteamHTTP_v003()");
export const SteamAPI_SteamGameServerHTTP_v003: KoffiFunc<() => ISteamHTTP> = lib.cdecl("ISteamHTTP* SteamAPI_SteamGameServerHTTP_v003()");
export const SteamAPI_ISteamHTTP_SetHTTPRequestContextValue: (self: ISteamHTTP, hRequest: number, ulContextValue: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetHTTPRequestContextValue(ISteamHTTP * self, , HTTPRequestHandle hRequest, uint64 ulContextValue)");
export const SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout: (self: ISteamHTTP, hRequest: number, unTimeoutSeconds: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetHTTPRequestNetworkActivityTimeout(ISteamHTTP * self, , HTTPRequestHandle hRequest, uint32 unTimeoutSeconds)");
export const SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue: (self: ISteamHTTP, hRequest: number, pchHeaderName: string, pchHeaderValue: string) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetHTTPRequestHeaderValue(ISteamHTTP * self, , HTTPRequestHandle hRequest, const char * pchHeaderName, const char * pchHeaderValue)");
export const SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter: (self: ISteamHTTP, hRequest: number, pchParamName: string, pchParamValue: string) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetHTTPRequestGetOrPostParameter(ISteamHTTP * self, , HTTPRequestHandle hRequest, const char * pchParamName, const char * pchParamValue)");
export const SteamAPI_ISteamHTTP_SendHTTPRequest: (self: ISteamHTTP, hRequest: number, pCallHandle: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SendHTTPRequest(ISteamHTTP * self, , HTTPRequestHandle hRequest, _Out_ SteamAPICall_t * pCallHandle)");
export const SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse: (self: ISteamHTTP, hRequest: number, pCallHandle: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SendHTTPRequestAndStreamResponse(ISteamHTTP * self, , HTTPRequestHandle hRequest, _Out_ SteamAPICall_t * pCallHandle)");
export const SteamAPI_ISteamHTTP_DeferHTTPRequest: (self: ISteamHTTP, hRequest: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_DeferHTTPRequest(ISteamHTTP * self, , HTTPRequestHandle hRequest)");
export const SteamAPI_ISteamHTTP_PrioritizeHTTPRequest: (self: ISteamHTTP, hRequest: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_PrioritizeHTTPRequest(ISteamHTTP * self, , HTTPRequestHandle hRequest)");
export const SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize: (self: ISteamHTTP, hRequest: number, pchHeaderName: string, unResponseHeaderSize: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderSize(ISteamHTTP * self, , HTTPRequestHandle hRequest, const char * pchHeaderName, _Out_ uint32 * unResponseHeaderSize)");
export const SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue: (self: ISteamHTTP, hRequest: number, pchHeaderName: string, pHeaderValueBuffer: [number], unBufferSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_GetHTTPResponseHeaderValue(ISteamHTTP * self, , HTTPRequestHandle hRequest, const char * pchHeaderName, _Out_ uint8 * pHeaderValueBuffer, uint32 unBufferSize)");
export const SteamAPI_ISteamHTTP_GetHTTPResponseBodySize: (self: ISteamHTTP, hRequest: number, unBodySize: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_GetHTTPResponseBodySize(ISteamHTTP * self, , HTTPRequestHandle hRequest, _Out_ uint32 * unBodySize)");
export const SteamAPI_ISteamHTTP_GetHTTPResponseBodyData: (self: ISteamHTTP, hRequest: number, pBodyDataBuffer: [number], unBufferSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_GetHTTPResponseBodyData(ISteamHTTP * self, , HTTPRequestHandle hRequest, _Out_ uint8 * pBodyDataBuffer, uint32 unBufferSize)");
export const SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData: (self: ISteamHTTP, hRequest: number, cOffset: number, pBodyDataBuffer: [number], unBufferSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_GetHTTPStreamingResponseBodyData(ISteamHTTP * self, , HTTPRequestHandle hRequest, uint32 cOffset, _Out_ uint8 * pBodyDataBuffer, uint32 unBufferSize)");
export const SteamAPI_ISteamHTTP_ReleaseHTTPRequest: (self: ISteamHTTP, hRequest: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_ReleaseHTTPRequest(ISteamHTTP * self, , HTTPRequestHandle hRequest)");
export const SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct: (self: ISteamHTTP, hRequest: number, pflPercentOut: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_GetHTTPDownloadProgressPct(ISteamHTTP * self, , HTTPRequestHandle hRequest, _Out_ float * pflPercentOut)");
export const SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody: (self: ISteamHTTP, hRequest: number, pchContentType: string, pubBody: [number], unBodyLen: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetHTTPRequestRawPostBody(ISteamHTTP * self, , HTTPRequestHandle hRequest, const char * pchContentType, _Out_ uint8 * pubBody, uint32 unBodyLen)");
export const SteamAPI_ISteamHTTP_CreateCookieContainer: (self: ISteamHTTP, bAllowResponsesToModify: boolean) => number = lib.cdecl("HTTPCookieContainerHandle SteamAPI_ISteamHTTP_CreateCookieContainer(ISteamHTTP * self, , bool bAllowResponsesToModify)");
export const SteamAPI_ISteamHTTP_ReleaseCookieContainer: (self: ISteamHTTP, hCookieContainer: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_ReleaseCookieContainer(ISteamHTTP * self, , HTTPCookieContainerHandle hCookieContainer)");
export const SteamAPI_ISteamHTTP_SetCookie: (self: ISteamHTTP, hCookieContainer: number, pchHost: string, pchUrl: string, pchCookie: string) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetCookie(ISteamHTTP * self, , HTTPCookieContainerHandle hCookieContainer, const char * pchHost, const char * pchUrl, const char * pchCookie)");
export const SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer: (self: ISteamHTTP, hRequest: number, hCookieContainer: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetHTTPRequestCookieContainer(ISteamHTTP * self, , HTTPRequestHandle hRequest, HTTPCookieContainerHandle hCookieContainer)");
export const SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo: (self: ISteamHTTP, hRequest: number, pchUserAgentInfo: string) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetHTTPRequestUserAgentInfo(ISteamHTTP * self, , HTTPRequestHandle hRequest, const char * pchUserAgentInfo)");
export const SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate: (self: ISteamHTTP, hRequest: number, bRequireVerifiedCertificate: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetHTTPRequestRequiresVerifiedCertificate(ISteamHTTP * self, , HTTPRequestHandle hRequest, bool bRequireVerifiedCertificate)");
export const SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS: (self: ISteamHTTP, hRequest: number, unMilliseconds: number) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_SetHTTPRequestAbsoluteTimeoutMS(ISteamHTTP * self, , HTTPRequestHandle hRequest, uint32 unMilliseconds)");
export const SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut: (self: ISteamHTTP, hRequest: number, pbWasTimedOut: [boolean]) => boolean = lib.cdecl("bool SteamAPI_ISteamHTTP_GetHTTPRequestWasTimedOut(ISteamHTTP * self, , HTTPRequestHandle hRequest, _Out_ bool * pbWasTimedOut)");
interface ISteamInput { __brand: "ISteamInput" }
koffi.opaque("ISteamInput");
export const SteamAPI_SteamInput_v006: KoffiFunc<() => ISteamInput> = lib.cdecl("ISteamInput* SteamAPI_SteamInput_v006()");
export const SteamAPI_ISteamInput_Init: (self: ISteamInput, bExplicitlyCallRunFrame: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamInput_Init(ISteamInput * self, , bool bExplicitlyCallRunFrame)");
export const SteamAPI_ISteamInput_Shutdown: (self: ISteamInput) => boolean = lib.cdecl("bool SteamAPI_ISteamInput_Shutdown(ISteamInput * self)");
export const SteamAPI_ISteamInput_SetInputActionManifestFilePath: (self: ISteamInput, pchInputActionManifestAbsolutePath: string) => boolean = lib.cdecl("bool SteamAPI_ISteamInput_SetInputActionManifestFilePath(ISteamInput * self, , const char * pchInputActionManifestAbsolutePath)");
export const SteamAPI_ISteamInput_RunFrame: (self: ISteamInput, bReservedValue: boolean) => void = lib.cdecl("void SteamAPI_ISteamInput_RunFrame(ISteamInput * self, , bool bReservedValue)");
export const SteamAPI_ISteamInput_BWaitForData: (self: ISteamInput, bWaitForever: boolean, unTimeout: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInput_BWaitForData(ISteamInput * self, , bool bWaitForever, uint32 unTimeout)");
export const SteamAPI_ISteamInput_BNewDataAvailable: (self: ISteamInput) => boolean = lib.cdecl("bool SteamAPI_ISteamInput_BNewDataAvailable(ISteamInput * self)");
export const SteamAPI_ISteamInput_GetConnectedControllers: (self: ISteamInput, handlesOut: [number]) => number = lib.cdecl("int SteamAPI_ISteamInput_GetConnectedControllers(ISteamInput * self, , _Out_ InputHandle_t * handlesOut)");
export const SteamAPI_ISteamInput_EnableDeviceCallbacks: (self: ISteamInput) => void = lib.cdecl("void SteamAPI_ISteamInput_EnableDeviceCallbacks(ISteamInput * self)");
export const SteamAPI_ISteamInput_GetActionSetHandle: (self: ISteamInput, pszActionSetName: string) => number = lib.cdecl("InputActionSetHandle_t SteamAPI_ISteamInput_GetActionSetHandle(ISteamInput * self, , const char * pszActionSetName)");
export const SteamAPI_ISteamInput_ActivateActionSet: (self: ISteamInput, inputHandle: number, actionSetHandle: number) => void = lib.cdecl("void SteamAPI_ISteamInput_ActivateActionSet(ISteamInput * self, , InputHandle_t inputHandle, InputActionSetHandle_t actionSetHandle)");
export const SteamAPI_ISteamInput_GetCurrentActionSet: (self: ISteamInput, inputHandle: number) => number = lib.cdecl("InputActionSetHandle_t SteamAPI_ISteamInput_GetCurrentActionSet(ISteamInput * self, , InputHandle_t inputHandle)");
export const SteamAPI_ISteamInput_ActivateActionSetLayer: (self: ISteamInput, inputHandle: number, actionSetLayerHandle: number) => void = lib.cdecl("void SteamAPI_ISteamInput_ActivateActionSetLayer(ISteamInput * self, , InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)");
export const SteamAPI_ISteamInput_DeactivateActionSetLayer: (self: ISteamInput, inputHandle: number, actionSetLayerHandle: number) => void = lib.cdecl("void SteamAPI_ISteamInput_DeactivateActionSetLayer(ISteamInput * self, , InputHandle_t inputHandle, InputActionSetHandle_t actionSetLayerHandle)");
export const SteamAPI_ISteamInput_DeactivateAllActionSetLayers: (self: ISteamInput, inputHandle: number) => void = lib.cdecl("void SteamAPI_ISteamInput_DeactivateAllActionSetLayers(ISteamInput * self, , InputHandle_t inputHandle)");
export const SteamAPI_ISteamInput_GetActiveActionSetLayers: (self: ISteamInput, inputHandle: number, handlesOut: [number]) => number = lib.cdecl("int SteamAPI_ISteamInput_GetActiveActionSetLayers(ISteamInput * self, , InputHandle_t inputHandle, _Out_ InputActionSetHandle_t * handlesOut)");
export const SteamAPI_ISteamInput_GetDigitalActionHandle: (self: ISteamInput, pszActionName: string) => number = lib.cdecl("InputDigitalActionHandle_t SteamAPI_ISteamInput_GetDigitalActionHandle(ISteamInput * self, , const char * pszActionName)");
export const SteamAPI_ISteamInput_GetStringForDigitalActionName: (self: ISteamInput, eActionHandle: number) => string = lib.cdecl("const char * SteamAPI_ISteamInput_GetStringForDigitalActionName(ISteamInput * self, , InputDigitalActionHandle_t eActionHandle)");
export const SteamAPI_ISteamInput_GetAnalogActionHandle: (self: ISteamInput, pszActionName: string) => number = lib.cdecl("InputAnalogActionHandle_t SteamAPI_ISteamInput_GetAnalogActionHandle(ISteamInput * self, , const char * pszActionName)");
export const SteamAPI_ISteamInput_GetStringForAnalogActionName: (self: ISteamInput, eActionHandle: number) => string = lib.cdecl("const char * SteamAPI_ISteamInput_GetStringForAnalogActionName(ISteamInput * self, , InputAnalogActionHandle_t eActionHandle)");
export const SteamAPI_ISteamInput_StopAnalogActionMomentum: (self: ISteamInput, inputHandle: number, eAction: number) => void = lib.cdecl("void SteamAPI_ISteamInput_StopAnalogActionMomentum(ISteamInput * self, , InputHandle_t inputHandle, InputAnalogActionHandle_t eAction)");
export const SteamAPI_ISteamInput_TriggerVibration: (self: ISteamInput, inputHandle: number, usLeftSpeed: number, usRightSpeed: number) => void = lib.cdecl("void SteamAPI_ISteamInput_TriggerVibration(ISteamInput * self, , InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)");
export const SteamAPI_ISteamInput_TriggerVibrationExtended: (self: ISteamInput, inputHandle: number, usLeftSpeed: number, usRightSpeed: number, usLeftTriggerSpeed: number, usRightTriggerSpeed: number) => void = lib.cdecl("void SteamAPI_ISteamInput_TriggerVibrationExtended(ISteamInput * self, , InputHandle_t inputHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed, unsigned short usLeftTriggerSpeed, unsigned short usRightTriggerSpeed)");
export const SteamAPI_ISteamInput_SetLEDColor: (self: ISteamInput, inputHandle: number, nColorR: number, nColorG: number, nColorB: number, nFlags: number) => void = lib.cdecl("void SteamAPI_ISteamInput_SetLEDColor(ISteamInput * self, , InputHandle_t inputHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)");
export const SteamAPI_ISteamInput_ShowBindingPanel: (self: ISteamInput, inputHandle: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInput_ShowBindingPanel(ISteamInput * self, , InputHandle_t inputHandle)");
export const SteamAPI_ISteamInput_GetControllerForGamepadIndex: (self: ISteamInput, nIndex: number) => number = lib.cdecl("InputHandle_t SteamAPI_ISteamInput_GetControllerForGamepadIndex(ISteamInput * self, , int nIndex)");
export const SteamAPI_ISteamInput_GetGamepadIndexForController: (self: ISteamInput, ulinputHandle: number) => number = lib.cdecl("int SteamAPI_ISteamInput_GetGamepadIndexForController(ISteamInput * self, , InputHandle_t ulinputHandle)");
export const SteamAPI_ISteamInput_GetDeviceBindingRevision: (self: ISteamInput, inputHandle: number, pMajor: [number], pMinor: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInput_GetDeviceBindingRevision(ISteamInput * self, , InputHandle_t inputHandle, _Out_ int * pMajor, _Out_ int * pMinor)");
export const SteamAPI_ISteamInput_GetRemotePlaySessionID: (self: ISteamInput, inputHandle: number) => number = lib.cdecl("uint32 SteamAPI_ISteamInput_GetRemotePlaySessionID(ISteamInput * self, , InputHandle_t inputHandle)");
export const SteamAPI_ISteamInput_GetSessionInputConfigurationSettings: (self: ISteamInput) => number = lib.cdecl("uint16 SteamAPI_ISteamInput_GetSessionInputConfigurationSettings(ISteamInput * self)");
interface ISteamController { __brand: "ISteamController" }
koffi.opaque("ISteamController");
export const SteamAPI_SteamController_v008: KoffiFunc<() => ISteamController> = lib.cdecl("ISteamController* SteamAPI_SteamController_v008()");
export const SteamAPI_ISteamController_Init: (self: ISteamController) => boolean = lib.cdecl("bool SteamAPI_ISteamController_Init(ISteamController * self)");
export const SteamAPI_ISteamController_Shutdown: (self: ISteamController) => boolean = lib.cdecl("bool SteamAPI_ISteamController_Shutdown(ISteamController * self)");
export const SteamAPI_ISteamController_RunFrame: (self: ISteamController) => void = lib.cdecl("void SteamAPI_ISteamController_RunFrame(ISteamController * self)");
export const SteamAPI_ISteamController_GetConnectedControllers: (self: ISteamController, handlesOut: [number]) => number = lib.cdecl("int SteamAPI_ISteamController_GetConnectedControllers(ISteamController * self, , _Out_ ControllerHandle_t * handlesOut)");
export const SteamAPI_ISteamController_GetActionSetHandle: (self: ISteamController, pszActionSetName: string) => number = lib.cdecl("ControllerActionSetHandle_t SteamAPI_ISteamController_GetActionSetHandle(ISteamController * self, , const char * pszActionSetName)");
export const SteamAPI_ISteamController_ActivateActionSet: (self: ISteamController, controllerHandle: number, actionSetHandle: number) => void = lib.cdecl("void SteamAPI_ISteamController_ActivateActionSet(ISteamController * self, , ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetHandle)");
export const SteamAPI_ISteamController_GetCurrentActionSet: (self: ISteamController, controllerHandle: number) => number = lib.cdecl("ControllerActionSetHandle_t SteamAPI_ISteamController_GetCurrentActionSet(ISteamController * self, , ControllerHandle_t controllerHandle)");
export const SteamAPI_ISteamController_ActivateActionSetLayer: (self: ISteamController, controllerHandle: number, actionSetLayerHandle: number) => void = lib.cdecl("void SteamAPI_ISteamController_ActivateActionSetLayer(ISteamController * self, , ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)");
export const SteamAPI_ISteamController_DeactivateActionSetLayer: (self: ISteamController, controllerHandle: number, actionSetLayerHandle: number) => void = lib.cdecl("void SteamAPI_ISteamController_DeactivateActionSetLayer(ISteamController * self, , ControllerHandle_t controllerHandle, ControllerActionSetHandle_t actionSetLayerHandle)");
export const SteamAPI_ISteamController_DeactivateAllActionSetLayers: (self: ISteamController, controllerHandle: number) => void = lib.cdecl("void SteamAPI_ISteamController_DeactivateAllActionSetLayers(ISteamController * self, , ControllerHandle_t controllerHandle)");
export const SteamAPI_ISteamController_GetActiveActionSetLayers: (self: ISteamController, controllerHandle: number, handlesOut: [number]) => number = lib.cdecl("int SteamAPI_ISteamController_GetActiveActionSetLayers(ISteamController * self, , ControllerHandle_t controllerHandle, _Out_ ControllerActionSetHandle_t * handlesOut)");
export const SteamAPI_ISteamController_GetDigitalActionHandle: (self: ISteamController, pszActionName: string) => number = lib.cdecl("ControllerDigitalActionHandle_t SteamAPI_ISteamController_GetDigitalActionHandle(ISteamController * self, , const char * pszActionName)");
export const SteamAPI_ISteamController_GetAnalogActionHandle: (self: ISteamController, pszActionName: string) => number = lib.cdecl("ControllerAnalogActionHandle_t SteamAPI_ISteamController_GetAnalogActionHandle(ISteamController * self, , const char * pszActionName)");
export const SteamAPI_ISteamController_StopAnalogActionMomentum: (self: ISteamController, controllerHandle: number, eAction: number) => void = lib.cdecl("void SteamAPI_ISteamController_StopAnalogActionMomentum(ISteamController * self, , ControllerHandle_t controllerHandle, ControllerAnalogActionHandle_t eAction)");
export const SteamAPI_ISteamController_TriggerVibration: (self: ISteamController, controllerHandle: number, usLeftSpeed: number, usRightSpeed: number) => void = lib.cdecl("void SteamAPI_ISteamController_TriggerVibration(ISteamController * self, , ControllerHandle_t controllerHandle, unsigned short usLeftSpeed, unsigned short usRightSpeed)");
export const SteamAPI_ISteamController_SetLEDColor: (self: ISteamController, controllerHandle: number, nColorR: number, nColorG: number, nColorB: number, nFlags: number) => void = lib.cdecl("void SteamAPI_ISteamController_SetLEDColor(ISteamController * self, , ControllerHandle_t controllerHandle, uint8 nColorR, uint8 nColorG, uint8 nColorB, unsigned int nFlags)");
export const SteamAPI_ISteamController_ShowBindingPanel: (self: ISteamController, controllerHandle: number) => boolean = lib.cdecl("bool SteamAPI_ISteamController_ShowBindingPanel(ISteamController * self, , ControllerHandle_t controllerHandle)");
export const SteamAPI_ISteamController_GetControllerForGamepadIndex: (self: ISteamController, nIndex: number) => number = lib.cdecl("ControllerHandle_t SteamAPI_ISteamController_GetControllerForGamepadIndex(ISteamController * self, , int nIndex)");
export const SteamAPI_ISteamController_GetGamepadIndexForController: (self: ISteamController, ulControllerHandle: number) => number = lib.cdecl("int SteamAPI_ISteamController_GetGamepadIndexForController(ISteamController * self, , ControllerHandle_t ulControllerHandle)");
export const SteamAPI_ISteamController_GetControllerBindingRevision: (self: ISteamController, controllerHandle: number, pMajor: [number], pMinor: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamController_GetControllerBindingRevision(ISteamController * self, , ControllerHandle_t controllerHandle, _Out_ int * pMajor, _Out_ int * pMinor)");
interface ISteamUGC { __brand: "ISteamUGC" }
koffi.opaque("ISteamUGC");
export const SteamAPI_SteamUGC_v016: KoffiFunc<() => ISteamUGC> = lib.cdecl("ISteamUGC* SteamAPI_SteamUGC_v016()");
export const SteamAPI_SteamGameServerUGC_v016: KoffiFunc<() => ISteamUGC> = lib.cdecl("ISteamUGC* SteamAPI_SteamGameServerUGC_v016()");
export const SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest: (self: ISteamUGC, pvecPublishedFileID: [number], unNumPublishedFileIDs: number) => number = lib.cdecl("UGCQueryHandle_t SteamAPI_ISteamUGC_CreateQueryUGCDetailsRequest(ISteamUGC * self, , _Out_ PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs)");
export const SteamAPI_ISteamUGC_SendQueryUGCRequest: (self: ISteamUGC, handle: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_SendQueryUGCRequest(ISteamUGC * self, , UGCQueryHandle_t handle)");
export const SteamAPI_ISteamUGC_GetQueryUGCNumTags: (self: ISteamUGC, handle: number, index: number) => number = lib.cdecl("uint32 SteamAPI_ISteamUGC_GetQueryUGCNumTags(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index)");
export const SteamAPI_ISteamUGC_GetQueryUGCTag: (self: ISteamUGC, handle: number, index: number, indexTag: number, pchValue: [string], cchValueSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_GetQueryUGCTag(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index, uint32 indexTag, _Out_ char * pchValue, uint32 cchValueSize)");
export const SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName: (self: ISteamUGC, handle: number, index: number, indexTag: number, pchValue: [string], cchValueSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_GetQueryUGCTagDisplayName(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index, uint32 indexTag, _Out_ char * pchValue, uint32 cchValueSize)");
export const SteamAPI_ISteamUGC_GetQueryUGCPreviewURL: (self: ISteamUGC, handle: number, index: number, pchURL: [string], cchURLSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_GetQueryUGCPreviewURL(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index, _Out_ char * pchURL, uint32 cchURLSize)");
export const SteamAPI_ISteamUGC_GetQueryUGCMetadata: (self: ISteamUGC, handle: number, index: number, pchMetadata: [string], cchMetadatasize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_GetQueryUGCMetadata(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index, _Out_ char * pchMetadata, uint32 cchMetadatasize)");
export const SteamAPI_ISteamUGC_GetQueryUGCChildren: (self: ISteamUGC, handle: number, index: number, pvecPublishedFileID: [number], cMaxEntries: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_GetQueryUGCChildren(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index, _Out_ PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries)");
export const SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews: (self: ISteamUGC, handle: number, index: number) => number = lib.cdecl("uint32 SteamAPI_ISteamUGC_GetQueryUGCNumAdditionalPreviews(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index)");
export const SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags: (self: ISteamUGC, handle: number, index: number) => number = lib.cdecl("uint32 SteamAPI_ISteamUGC_GetQueryUGCNumKeyValueTags(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index)");
export const SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag: (self: ISteamUGC, handle: number, index: number, keyValueTagIndex: number, pchKey: [string], cchKeySize: number, pchValue: [string], cchValueSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_GetQueryUGCKeyValueTag(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index, uint32 keyValueTagIndex, _Out_ char * pchKey, uint32 cchKeySize, _Out_ char * pchValue, uint32 cchValueSize)");
export const SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag: (self: ISteamUGC, handle: number, index: number, pchKey: string, pchValue: [string], cchValueSize: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_GetQueryFirstUGCKeyValueTag(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 index, const char * pchKey, _Out_ char * pchValue, uint32 cchValueSize)");
export const SteamAPI_ISteamUGC_ReleaseQueryUGCRequest: (self: ISteamUGC, handle: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_ReleaseQueryUGCRequest(ISteamUGC * self, , UGCQueryHandle_t handle)");
export const SteamAPI_ISteamUGC_AddRequiredTag: (self: ISteamUGC, handle: number, pTagName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_AddRequiredTag(ISteamUGC * self, , UGCQueryHandle_t handle, const char * pTagName)");
export const SteamAPI_ISteamUGC_AddExcludedTag: (self: ISteamUGC, handle: number, pTagName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_AddExcludedTag(ISteamUGC * self, , UGCQueryHandle_t handle, const char * pTagName)");
export const SteamAPI_ISteamUGC_SetReturnOnlyIDs: (self: ISteamUGC, handle: number, bReturnOnlyIDs: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetReturnOnlyIDs(ISteamUGC * self, , UGCQueryHandle_t handle, bool bReturnOnlyIDs)");
export const SteamAPI_ISteamUGC_SetReturnKeyValueTags: (self: ISteamUGC, handle: number, bReturnKeyValueTags: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetReturnKeyValueTags(ISteamUGC * self, , UGCQueryHandle_t handle, bool bReturnKeyValueTags)");
export const SteamAPI_ISteamUGC_SetReturnLongDescription: (self: ISteamUGC, handle: number, bReturnLongDescription: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetReturnLongDescription(ISteamUGC * self, , UGCQueryHandle_t handle, bool bReturnLongDescription)");
export const SteamAPI_ISteamUGC_SetReturnMetadata: (self: ISteamUGC, handle: number, bReturnMetadata: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetReturnMetadata(ISteamUGC * self, , UGCQueryHandle_t handle, bool bReturnMetadata)");
export const SteamAPI_ISteamUGC_SetReturnChildren: (self: ISteamUGC, handle: number, bReturnChildren: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetReturnChildren(ISteamUGC * self, , UGCQueryHandle_t handle, bool bReturnChildren)");
export const SteamAPI_ISteamUGC_SetReturnAdditionalPreviews: (self: ISteamUGC, handle: number, bReturnAdditionalPreviews: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetReturnAdditionalPreviews(ISteamUGC * self, , UGCQueryHandle_t handle, bool bReturnAdditionalPreviews)");
export const SteamAPI_ISteamUGC_SetReturnTotalOnly: (self: ISteamUGC, handle: number, bReturnTotalOnly: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetReturnTotalOnly(ISteamUGC * self, , UGCQueryHandle_t handle, bool bReturnTotalOnly)");
export const SteamAPI_ISteamUGC_SetReturnPlaytimeStats: (self: ISteamUGC, handle: number, unDays: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetReturnPlaytimeStats(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 unDays)");
export const SteamAPI_ISteamUGC_SetLanguage: (self: ISteamUGC, handle: number, pchLanguage: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetLanguage(ISteamUGC * self, , UGCQueryHandle_t handle, const char * pchLanguage)");
export const SteamAPI_ISteamUGC_SetAllowCachedResponse: (self: ISteamUGC, handle: number, unMaxAgeSeconds: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetAllowCachedResponse(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 unMaxAgeSeconds)");
export const SteamAPI_ISteamUGC_SetCloudFileNameFilter: (self: ISteamUGC, handle: number, pMatchCloudFileName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetCloudFileNameFilter(ISteamUGC * self, , UGCQueryHandle_t handle, const char * pMatchCloudFileName)");
export const SteamAPI_ISteamUGC_SetMatchAnyTag: (self: ISteamUGC, handle: number, bMatchAnyTag: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetMatchAnyTag(ISteamUGC * self, , UGCQueryHandle_t handle, bool bMatchAnyTag)");
export const SteamAPI_ISteamUGC_SetSearchText: (self: ISteamUGC, handle: number, pSearchText: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetSearchText(ISteamUGC * self, , UGCQueryHandle_t handle, const char * pSearchText)");
export const SteamAPI_ISteamUGC_SetRankedByTrendDays: (self: ISteamUGC, handle: number, unDays: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetRankedByTrendDays(ISteamUGC * self, , UGCQueryHandle_t handle, uint32 unDays)");
export const SteamAPI_ISteamUGC_SetTimeCreatedDateRange: (self: ISteamUGC, handle: number, rtStart: number, rtEnd: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetTimeCreatedDateRange(ISteamUGC * self, , UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)");
export const SteamAPI_ISteamUGC_SetTimeUpdatedDateRange: (self: ISteamUGC, handle: number, rtStart: number, rtEnd: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetTimeUpdatedDateRange(ISteamUGC * self, , UGCQueryHandle_t handle, RTime32 rtStart, RTime32 rtEnd)");
export const SteamAPI_ISteamUGC_AddRequiredKeyValueTag: (self: ISteamUGC, handle: number, pKey: string, pValue: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_AddRequiredKeyValueTag(ISteamUGC * self, , UGCQueryHandle_t handle, const char * pKey, const char * pValue)");
export const SteamAPI_ISteamUGC_RequestUGCDetails: (self: ISteamUGC, nPublishedFileID: number, unMaxAgeSeconds: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_RequestUGCDetails(ISteamUGC * self, , PublishedFileId_t nPublishedFileID, uint32 unMaxAgeSeconds)");
export const SteamAPI_ISteamUGC_StartItemUpdate: (self: ISteamUGC, nConsumerAppId: number, nPublishedFileID: number) => number = lib.cdecl("UGCUpdateHandle_t SteamAPI_ISteamUGC_StartItemUpdate(ISteamUGC * self, , AppId_t nConsumerAppId, PublishedFileId_t nPublishedFileID)");
export const SteamAPI_ISteamUGC_SetItemTitle: (self: ISteamUGC, handle: number, pchTitle: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetItemTitle(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pchTitle)");
export const SteamAPI_ISteamUGC_SetItemDescription: (self: ISteamUGC, handle: number, pchDescription: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetItemDescription(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pchDescription)");
export const SteamAPI_ISteamUGC_SetItemUpdateLanguage: (self: ISteamUGC, handle: number, pchLanguage: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetItemUpdateLanguage(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pchLanguage)");
export const SteamAPI_ISteamUGC_SetItemMetadata: (self: ISteamUGC, handle: number, pchMetaData: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetItemMetadata(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pchMetaData)");
export const SteamAPI_ISteamUGC_SetItemContent: (self: ISteamUGC, handle: number, pszContentFolder: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetItemContent(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pszContentFolder)");
export const SteamAPI_ISteamUGC_SetItemPreview: (self: ISteamUGC, handle: number, pszPreviewFile: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetItemPreview(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pszPreviewFile)");
export const SteamAPI_ISteamUGC_SetAllowLegacyUpload: (self: ISteamUGC, handle: number, bAllowLegacyUpload: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_SetAllowLegacyUpload(ISteamUGC * self, , UGCUpdateHandle_t handle, bool bAllowLegacyUpload)");
export const SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags: (self: ISteamUGC, handle: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_RemoveAllItemKeyValueTags(ISteamUGC * self, , UGCUpdateHandle_t handle)");
export const SteamAPI_ISteamUGC_RemoveItemKeyValueTags: (self: ISteamUGC, handle: number, pchKey: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_RemoveItemKeyValueTags(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pchKey)");
export const SteamAPI_ISteamUGC_AddItemKeyValueTag: (self: ISteamUGC, handle: number, pchKey: string, pchValue: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_AddItemKeyValueTag(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pchKey, const char * pchValue)");
export const SteamAPI_ISteamUGC_AddItemPreviewVideo: (self: ISteamUGC, handle: number, pszVideoID: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_AddItemPreviewVideo(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pszVideoID)");
export const SteamAPI_ISteamUGC_UpdateItemPreviewFile: (self: ISteamUGC, handle: number, index: number, pszPreviewFile: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_UpdateItemPreviewFile(ISteamUGC * self, , UGCUpdateHandle_t handle, uint32 index, const char * pszPreviewFile)");
export const SteamAPI_ISteamUGC_UpdateItemPreviewVideo: (self: ISteamUGC, handle: number, index: number, pszVideoID: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_UpdateItemPreviewVideo(ISteamUGC * self, , UGCUpdateHandle_t handle, uint32 index, const char * pszVideoID)");
export const SteamAPI_ISteamUGC_RemoveItemPreview: (self: ISteamUGC, handle: number, index: number) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_RemoveItemPreview(ISteamUGC * self, , UGCUpdateHandle_t handle, uint32 index)");
export const SteamAPI_ISteamUGC_SubmitItemUpdate: (self: ISteamUGC, handle: number, pchChangeNote: string) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_SubmitItemUpdate(ISteamUGC * self, , UGCUpdateHandle_t handle, const char * pchChangeNote)");
export const SteamAPI_ISteamUGC_SetUserItemVote: (self: ISteamUGC, nPublishedFileID: number, bVoteUp: boolean) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_SetUserItemVote(ISteamUGC * self, , PublishedFileId_t nPublishedFileID, bool bVoteUp)");
export const SteamAPI_ISteamUGC_GetUserItemVote: (self: ISteamUGC, nPublishedFileID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_GetUserItemVote(ISteamUGC * self, , PublishedFileId_t nPublishedFileID)");
export const SteamAPI_ISteamUGC_AddItemToFavorites: (self: ISteamUGC, nAppId: number, nPublishedFileID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_AddItemToFavorites(ISteamUGC * self, , AppId_t nAppId, PublishedFileId_t nPublishedFileID)");
export const SteamAPI_ISteamUGC_RemoveItemFromFavorites: (self: ISteamUGC, nAppId: number, nPublishedFileID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_RemoveItemFromFavorites(ISteamUGC * self, , AppId_t nAppId, PublishedFileId_t nPublishedFileID)");
export const SteamAPI_ISteamUGC_SubscribeItem: (self: ISteamUGC, nPublishedFileID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_SubscribeItem(ISteamUGC * self, , PublishedFileId_t nPublishedFileID)");
export const SteamAPI_ISteamUGC_UnsubscribeItem: (self: ISteamUGC, nPublishedFileID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_UnsubscribeItem(ISteamUGC * self, , PublishedFileId_t nPublishedFileID)");
export const SteamAPI_ISteamUGC_GetNumSubscribedItems: (self: ISteamUGC) => number = lib.cdecl("uint32 SteamAPI_ISteamUGC_GetNumSubscribedItems(ISteamUGC * self)");
export const SteamAPI_ISteamUGC_GetSubscribedItems: (self: ISteamUGC, pvecPublishedFileID: [number], cMaxEntries: number) => number = lib.cdecl("uint32 SteamAPI_ISteamUGC_GetSubscribedItems(ISteamUGC * self, , _Out_ PublishedFileId_t * pvecPublishedFileID, uint32 cMaxEntries)");
export const SteamAPI_ISteamUGC_GetItemState: (self: ISteamUGC, nPublishedFileID: number) => number = lib.cdecl("uint32 SteamAPI_ISteamUGC_GetItemState(ISteamUGC * self, , PublishedFileId_t nPublishedFileID)");
export const SteamAPI_ISteamUGC_GetItemInstallInfo: (self: ISteamUGC, nPublishedFileID: number, punSizeOnDisk: [number], pchFolder: [string], cchFolderSize: number, punTimeStamp: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_GetItemInstallInfo(ISteamUGC * self, , PublishedFileId_t nPublishedFileID, _Out_ uint64 * punSizeOnDisk, _Out_ char * pchFolder, uint32 cchFolderSize, _Out_ uint32 * punTimeStamp)");
export const SteamAPI_ISteamUGC_GetItemDownloadInfo: (self: ISteamUGC, nPublishedFileID: number, punBytesDownloaded: [number], punBytesTotal: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_GetItemDownloadInfo(ISteamUGC * self, , PublishedFileId_t nPublishedFileID, _Out_ uint64 * punBytesDownloaded, _Out_ uint64 * punBytesTotal)");
export const SteamAPI_ISteamUGC_DownloadItem: (self: ISteamUGC, nPublishedFileID: number, bHighPriority: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_DownloadItem(ISteamUGC * self, , PublishedFileId_t nPublishedFileID, bool bHighPriority)");
export const SteamAPI_ISteamUGC_BInitWorkshopForGameServer: (self: ISteamUGC, unWorkshopDepotID: number, pszFolder: string) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_BInitWorkshopForGameServer(ISteamUGC * self, , DepotId_t unWorkshopDepotID, const char * pszFolder)");
export const SteamAPI_ISteamUGC_SuspendDownloads: (self: ISteamUGC, bSuspend: boolean) => void = lib.cdecl("void SteamAPI_ISteamUGC_SuspendDownloads(ISteamUGC * self, , bool bSuspend)");
export const SteamAPI_ISteamUGC_StartPlaytimeTracking: (self: ISteamUGC, pvecPublishedFileID: [number], unNumPublishedFileIDs: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_StartPlaytimeTracking(ISteamUGC * self, , _Out_ PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs)");
export const SteamAPI_ISteamUGC_StopPlaytimeTracking: (self: ISteamUGC, pvecPublishedFileID: [number], unNumPublishedFileIDs: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTracking(ISteamUGC * self, , _Out_ PublishedFileId_t * pvecPublishedFileID, uint32 unNumPublishedFileIDs)");
export const SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems: (self: ISteamUGC) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_StopPlaytimeTrackingForAllItems(ISteamUGC * self)");
export const SteamAPI_ISteamUGC_AddDependency: (self: ISteamUGC, nParentPublishedFileID: number, nChildPublishedFileID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_AddDependency(ISteamUGC * self, , PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)");
export const SteamAPI_ISteamUGC_RemoveDependency: (self: ISteamUGC, nParentPublishedFileID: number, nChildPublishedFileID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_RemoveDependency(ISteamUGC * self, , PublishedFileId_t nParentPublishedFileID, PublishedFileId_t nChildPublishedFileID)");
export const SteamAPI_ISteamUGC_AddAppDependency: (self: ISteamUGC, nPublishedFileID: number, nAppID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_AddAppDependency(ISteamUGC * self, , PublishedFileId_t nPublishedFileID, AppId_t nAppID)");
export const SteamAPI_ISteamUGC_RemoveAppDependency: (self: ISteamUGC, nPublishedFileID: number, nAppID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_RemoveAppDependency(ISteamUGC * self, , PublishedFileId_t nPublishedFileID, AppId_t nAppID)");
export const SteamAPI_ISteamUGC_GetAppDependencies: (self: ISteamUGC, nPublishedFileID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_GetAppDependencies(ISteamUGC * self, , PublishedFileId_t nPublishedFileID)");
export const SteamAPI_ISteamUGC_DeleteItem: (self: ISteamUGC, nPublishedFileID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_DeleteItem(ISteamUGC * self, , PublishedFileId_t nPublishedFileID)");
export const SteamAPI_ISteamUGC_ShowWorkshopEULA: (self: ISteamUGC) => boolean = lib.cdecl("bool SteamAPI_ISteamUGC_ShowWorkshopEULA(ISteamUGC * self)");
export const SteamAPI_ISteamUGC_GetWorkshopEULAStatus: (self: ISteamUGC) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamUGC_GetWorkshopEULAStatus(ISteamUGC * self)");
interface ISteamAppList { __brand: "ISteamAppList" }
koffi.opaque("ISteamAppList");
export const SteamAPI_SteamAppList_v001: KoffiFunc<() => ISteamAppList> = lib.cdecl("ISteamAppList* SteamAPI_SteamAppList_v001()");
export const SteamAPI_ISteamAppList_GetNumInstalledApps: (self: ISteamAppList) => number = lib.cdecl("uint32 SteamAPI_ISteamAppList_GetNumInstalledApps(ISteamAppList * self)");
export const SteamAPI_ISteamAppList_GetInstalledApps: (self: ISteamAppList, pvecAppID: [number], unMaxAppIDs: number) => number = lib.cdecl("uint32 SteamAPI_ISteamAppList_GetInstalledApps(ISteamAppList * self, , _Out_ AppId_t * pvecAppID, uint32 unMaxAppIDs)");
export const SteamAPI_ISteamAppList_GetAppName: (self: ISteamAppList, nAppID: number, pchName: [string], cchNameMax: number) => number = lib.cdecl("int SteamAPI_ISteamAppList_GetAppName(ISteamAppList * self, , AppId_t nAppID, _Out_ char * pchName, int cchNameMax)");
export const SteamAPI_ISteamAppList_GetAppInstallDir: (self: ISteamAppList, nAppID: number, pchDirectory: [string], cchNameMax: number) => number = lib.cdecl("int SteamAPI_ISteamAppList_GetAppInstallDir(ISteamAppList * self, , AppId_t nAppID, _Out_ char * pchDirectory, int cchNameMax)");
export const SteamAPI_ISteamAppList_GetAppBuildId: (self: ISteamAppList, nAppID: number) => number = lib.cdecl("int SteamAPI_ISteamAppList_GetAppBuildId(ISteamAppList * self, , AppId_t nAppID)");
interface ISteamHTMLSurface { __brand: "ISteamHTMLSurface" }
koffi.opaque("ISteamHTMLSurface");
export const SteamAPI_SteamHTMLSurface_v005: KoffiFunc<() => ISteamHTMLSurface> = lib.cdecl("ISteamHTMLSurface* SteamAPI_SteamHTMLSurface_v005()");
export const SteamAPI_ISteamHTMLSurface_Init: (self: ISteamHTMLSurface) => boolean = lib.cdecl("bool SteamAPI_ISteamHTMLSurface_Init(ISteamHTMLSurface * self)");
export const SteamAPI_ISteamHTMLSurface_Shutdown: (self: ISteamHTMLSurface) => boolean = lib.cdecl("bool SteamAPI_ISteamHTMLSurface_Shutdown(ISteamHTMLSurface * self)");
export const SteamAPI_ISteamHTMLSurface_CreateBrowser: (self: ISteamHTMLSurface, pchUserAgent: string, pchUserCSS: string) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamHTMLSurface_CreateBrowser(ISteamHTMLSurface * self, , const char * pchUserAgent, const char * pchUserCSS)");
export const SteamAPI_ISteamHTMLSurface_RemoveBrowser: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_RemoveBrowser(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_LoadURL: (self: ISteamHTMLSurface, unBrowserHandle: number, pchURL: string, pchPostData: string) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_LoadURL(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, const char * pchURL, const char * pchPostData)");
export const SteamAPI_ISteamHTMLSurface_SetSize: (self: ISteamHTMLSurface, unBrowserHandle: number, unWidth: number, unHeight: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_SetSize(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, uint32 unWidth, uint32 unHeight)");
export const SteamAPI_ISteamHTMLSurface_StopLoad: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_StopLoad(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_Reload: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_Reload(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_GoBack: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_GoBack(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_GoForward: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_GoForward(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_AddHeader: (self: ISteamHTMLSurface, unBrowserHandle: number, pchKey: string, pchValue: string) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_AddHeader(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, const char * pchKey, const char * pchValue)");
export const SteamAPI_ISteamHTMLSurface_ExecuteJavascript: (self: ISteamHTMLSurface, unBrowserHandle: number, pchScript: string) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_ExecuteJavascript(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, const char * pchScript)");
export const SteamAPI_ISteamHTMLSurface_MouseMove: (self: ISteamHTMLSurface, unBrowserHandle: number, x: number, y: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_MouseMove(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, int x, int y)");
export const SteamAPI_ISteamHTMLSurface_MouseWheel: (self: ISteamHTMLSurface, unBrowserHandle: number, nDelta: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_MouseWheel(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, int32 nDelta)");
export const SteamAPI_ISteamHTMLSurface_SetHorizontalScroll: (self: ISteamHTMLSurface, unBrowserHandle: number, nAbsolutePixelScroll: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_SetHorizontalScroll(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)");
export const SteamAPI_ISteamHTMLSurface_SetVerticalScroll: (self: ISteamHTMLSurface, unBrowserHandle: number, nAbsolutePixelScroll: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_SetVerticalScroll(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, uint32 nAbsolutePixelScroll)");
export const SteamAPI_ISteamHTMLSurface_SetKeyFocus: (self: ISteamHTMLSurface, unBrowserHandle: number, bHasKeyFocus: boolean) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_SetKeyFocus(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, bool bHasKeyFocus)");
export const SteamAPI_ISteamHTMLSurface_ViewSource: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_ViewSource(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_CopyToClipboard: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_CopyToClipboard(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_PasteFromClipboard: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_PasteFromClipboard(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_Find: (self: ISteamHTMLSurface, unBrowserHandle: number, pchSearchStr: string, bCurrentlyInFind: boolean, bReverse: boolean) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_Find(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, const char * pchSearchStr, bool bCurrentlyInFind, bool bReverse)");
export const SteamAPI_ISteamHTMLSurface_StopFind: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_StopFind(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_GetLinkAtPosition: (self: ISteamHTMLSurface, unBrowserHandle: number, x: number, y: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_GetLinkAtPosition(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, int x, int y)");
export const SteamAPI_ISteamHTMLSurface_SetCookie: (self: ISteamHTMLSurface, pchHostname: string, pchKey: string, pchValue: string, pchPath: string, nExpires: number, bSecure: boolean, bHTTPOnly: boolean) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_SetCookie(ISteamHTMLSurface * self, , const char * pchHostname, const char * pchKey, const char * pchValue, const char * pchPath, RTime32 nExpires, bool bSecure, bool bHTTPOnly)");
export const SteamAPI_ISteamHTMLSurface_SetPageScaleFactor: (self: ISteamHTMLSurface, unBrowserHandle: number, flZoom: number, nPointX: number, nPointY: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_SetPageScaleFactor(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, float flZoom, int nPointX, int nPointY)");
export const SteamAPI_ISteamHTMLSurface_SetBackgroundMode: (self: ISteamHTMLSurface, unBrowserHandle: number, bBackgroundMode: boolean) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_SetBackgroundMode(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, bool bBackgroundMode)");
export const SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor: (self: ISteamHTMLSurface, unBrowserHandle: number, flDPIScaling: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_SetDPIScalingFactor(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, float flDPIScaling)");
export const SteamAPI_ISteamHTMLSurface_OpenDeveloperTools: (self: ISteamHTMLSurface, unBrowserHandle: number) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_OpenDeveloperTools(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle)");
export const SteamAPI_ISteamHTMLSurface_AllowStartRequest: (self: ISteamHTMLSurface, unBrowserHandle: number, bAllowed: boolean) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_AllowStartRequest(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, bool bAllowed)");
export const SteamAPI_ISteamHTMLSurface_JSDialogResponse: (self: ISteamHTMLSurface, unBrowserHandle: number, bResult: boolean) => void = lib.cdecl("void SteamAPI_ISteamHTMLSurface_JSDialogResponse(ISteamHTMLSurface * self, , HHTMLBrowser unBrowserHandle, bool bResult)");
interface ISteamInventory { __brand: "ISteamInventory" }
koffi.opaque("ISteamInventory");
export const SteamAPI_SteamInventory_v003: KoffiFunc<() => ISteamInventory> = lib.cdecl("ISteamInventory* SteamAPI_SteamInventory_v003()");
export const SteamAPI_SteamGameServerInventory_v003: KoffiFunc<() => ISteamInventory> = lib.cdecl("ISteamInventory* SteamAPI_SteamGameServerInventory_v003()");
export const SteamAPI_ISteamInventory_GetResultItemProperty: (self: ISteamInventory, resultHandle: number, unItemIndex: number, pchPropertyName: string, pchValueBuffer: [string], punValueBufferSizeOut: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GetResultItemProperty(ISteamInventory * self, , SteamInventoryResult_t resultHandle, uint32 unItemIndex, const char * pchPropertyName, _Out_ char * pchValueBuffer, _Out_ uint32 * punValueBufferSizeOut)");
export const SteamAPI_ISteamInventory_GetResultTimestamp: (self: ISteamInventory, resultHandle: number) => number = lib.cdecl("uint32 SteamAPI_ISteamInventory_GetResultTimestamp(ISteamInventory * self, , SteamInventoryResult_t resultHandle)");
export const SteamAPI_ISteamInventory_CheckResultSteamID: (self: ISteamInventory, resultHandle: number, steamIDExpected: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_CheckResultSteamID(ISteamInventory * self, , SteamInventoryResult_t resultHandle, uint64_steamid steamIDExpected)");
export const SteamAPI_ISteamInventory_DestroyResult: (self: ISteamInventory, resultHandle: number) => void = lib.cdecl("void SteamAPI_ISteamInventory_DestroyResult(ISteamInventory * self, , SteamInventoryResult_t resultHandle)");
export const SteamAPI_ISteamInventory_GetAllItems: (self: ISteamInventory, pResultHandle: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GetAllItems(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle)");
export const SteamAPI_ISteamInventory_GetItemsByID: (self: ISteamInventory, pResultHandle: [number], pInstanceIDs: number, unCountInstanceIDs: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GetItemsByID(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, const SteamItemInstanceID_t * pInstanceIDs, uint32 unCountInstanceIDs)");
export const SteamAPI_ISteamInventory_SerializeResult: (self: ISteamInventory, resultHandle: number, pOutBuffer: [void], punOutBufferSize: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_SerializeResult(ISteamInventory * self, , SteamInventoryResult_t resultHandle, _Out_ void * pOutBuffer, _Out_ uint32 * punOutBufferSize)");
export const SteamAPI_ISteamInventory_DeserializeResult: (self: ISteamInventory, pOutResultHandle: [number], pBuffer: void, unBufferSize: number, bRESERVED_MUST_BE_FALSE: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_DeserializeResult(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pOutResultHandle, const void * pBuffer, uint32 unBufferSize, bool bRESERVED_MUST_BE_FALSE)");
export const SteamAPI_ISteamInventory_GenerateItems: (self: ISteamInventory, pResultHandle: [number], pArrayItemDefs: number, punArrayQuantity: number, unArrayLength: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GenerateItems(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength)");
export const SteamAPI_ISteamInventory_GrantPromoItems: (self: ISteamInventory, pResultHandle: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GrantPromoItems(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle)");
export const SteamAPI_ISteamInventory_AddPromoItem: (self: ISteamInventory, pResultHandle: [number], itemDef: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_AddPromoItem(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, SteamItemDef_t itemDef)");
export const SteamAPI_ISteamInventory_AddPromoItems: (self: ISteamInventory, pResultHandle: [number], pArrayItemDefs: number, unArrayLength: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_AddPromoItems(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayItemDefs, uint32 unArrayLength)");
export const SteamAPI_ISteamInventory_ConsumeItem: (self: ISteamInventory, pResultHandle: [number], itemConsume: number, unQuantity: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_ConsumeItem(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemConsume, uint32 unQuantity)");
export const SteamAPI_ISteamInventory_ExchangeItems: (self: ISteamInventory, pResultHandle: [number], pArrayGenerate: number, punArrayGenerateQuantity: number, unArrayGenerateLength: number, pArrayDestroy: number, punArrayDestroyQuantity: number, unArrayDestroyLength: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_ExchangeItems(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, const SteamItemDef_t * pArrayGenerate, const uint32 * punArrayGenerateQuantity, uint32 unArrayGenerateLength, const SteamItemInstanceID_t * pArrayDestroy, const uint32 * punArrayDestroyQuantity, uint32 unArrayDestroyLength)");
export const SteamAPI_ISteamInventory_TransferItemQuantity: (self: ISteamInventory, pResultHandle: [number], itemIdSource: number, unQuantity: number, itemIdDest: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_TransferItemQuantity(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, SteamItemInstanceID_t itemIdSource, uint32 unQuantity, SteamItemInstanceID_t itemIdDest)");
export const SteamAPI_ISteamInventory_SendItemDropHeartbeat: (self: ISteamInventory) => void = lib.cdecl("void SteamAPI_ISteamInventory_SendItemDropHeartbeat(ISteamInventory * self)");
export const SteamAPI_ISteamInventory_TriggerItemDrop: (self: ISteamInventory, pResultHandle: [number], dropListDefinition: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_TriggerItemDrop(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, SteamItemDef_t dropListDefinition)");
export const SteamAPI_ISteamInventory_TradeItems: (self: ISteamInventory, pResultHandle: [number], steamIDTradePartner: number, pArrayGive: number, pArrayGiveQuantity: number, nArrayGiveLength: number, pArrayGet: number, pArrayGetQuantity: number, nArrayGetLength: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_TradeItems(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, uint64_steamid steamIDTradePartner, const SteamItemInstanceID_t * pArrayGive, const uint32 * pArrayGiveQuantity, uint32 nArrayGiveLength, const SteamItemInstanceID_t * pArrayGet, const uint32 * pArrayGetQuantity, uint32 nArrayGetLength)");
export const SteamAPI_ISteamInventory_LoadItemDefinitions: (self: ISteamInventory) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_LoadItemDefinitions(ISteamInventory * self)");
export const SteamAPI_ISteamInventory_GetItemDefinitionIDs: (self: ISteamInventory, pItemDefIDs: [number], punItemDefIDsArraySize: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GetItemDefinitionIDs(ISteamInventory * self, , _Out_ SteamItemDef_t * pItemDefIDs, _Out_ uint32 * punItemDefIDsArraySize)");
export const SteamAPI_ISteamInventory_GetItemDefinitionProperty: (self: ISteamInventory, iDefinition: number, pchPropertyName: string, pchValueBuffer: [string], punValueBufferSizeOut: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GetItemDefinitionProperty(ISteamInventory * self, , SteamItemDef_t iDefinition, const char * pchPropertyName, _Out_ char * pchValueBuffer, _Out_ uint32 * punValueBufferSizeOut)");
export const SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs: (self: ISteamInventory, steamID: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamInventory_RequestEligiblePromoItemDefinitionsIDs(ISteamInventory * self, , uint64_steamid steamID)");
export const SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs: (self: ISteamInventory, steamID: number, pItemDefIDs: [number], punItemDefIDsArraySize: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GetEligiblePromoItemDefinitionIDs(ISteamInventory * self, , uint64_steamid steamID, _Out_ SteamItemDef_t * pItemDefIDs, _Out_ uint32 * punItemDefIDsArraySize)");
export const SteamAPI_ISteamInventory_StartPurchase: (self: ISteamInventory, pArrayItemDefs: number, punArrayQuantity: number, unArrayLength: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamInventory_StartPurchase(ISteamInventory * self, , const SteamItemDef_t * pArrayItemDefs, const uint32 * punArrayQuantity, uint32 unArrayLength)");
export const SteamAPI_ISteamInventory_RequestPrices: (self: ISteamInventory) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamInventory_RequestPrices(ISteamInventory * self)");
export const SteamAPI_ISteamInventory_GetNumItemsWithPrices: (self: ISteamInventory) => number = lib.cdecl("uint32 SteamAPI_ISteamInventory_GetNumItemsWithPrices(ISteamInventory * self)");
export const SteamAPI_ISteamInventory_GetItemsWithPrices: (self: ISteamInventory, pArrayItemDefs: [number], pCurrentPrices: [number], pBasePrices: [number], unArrayLength: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GetItemsWithPrices(ISteamInventory * self, , _Out_ SteamItemDef_t * pArrayItemDefs, _Out_ uint64 * pCurrentPrices, _Out_ uint64 * pBasePrices, uint32 unArrayLength)");
export const SteamAPI_ISteamInventory_GetItemPrice: (self: ISteamInventory, iDefinition: number, pCurrentPrice: [number], pBasePrice: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_GetItemPrice(ISteamInventory * self, , SteamItemDef_t iDefinition, _Out_ uint64 * pCurrentPrice, _Out_ uint64 * pBasePrice)");
export const SteamAPI_ISteamInventory_StartUpdateProperties: (self: ISteamInventory) => number = lib.cdecl("SteamInventoryUpdateHandle_t SteamAPI_ISteamInventory_StartUpdateProperties(ISteamInventory * self)");
export const SteamAPI_ISteamInventory_RemoveProperty: (self: ISteamInventory, handle: number, nItemID: number, pchPropertyName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_RemoveProperty(ISteamInventory * self, , SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName)");
export const SteamAPI_ISteamInventory_SetPropertyString: (self: ISteamInventory, handle: number, nItemID: number, pchPropertyName: string, pchPropertyValue: string) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_SetPropertyString(ISteamInventory * self, , SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, const char * pchPropertyValue)");
export const SteamAPI_ISteamInventory_SetPropertyBool: (self: ISteamInventory, handle: number, nItemID: number, pchPropertyName: string, bValue: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_SetPropertyBool(ISteamInventory * self, , SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, bool bValue)");
export const SteamAPI_ISteamInventory_SetPropertyInt64: (self: ISteamInventory, handle: number, nItemID: number, pchPropertyName: string, nValue: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_SetPropertyInt64(ISteamInventory * self, , SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, int64 nValue)");
export const SteamAPI_ISteamInventory_SetPropertyFloat: (self: ISteamInventory, handle: number, nItemID: number, pchPropertyName: string, flValue: number) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_SetPropertyFloat(ISteamInventory * self, , SteamInventoryUpdateHandle_t handle, SteamItemInstanceID_t nItemID, const char * pchPropertyName, float flValue)");
export const SteamAPI_ISteamInventory_SubmitUpdateProperties: (self: ISteamInventory, handle: number, pResultHandle: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_SubmitUpdateProperties(ISteamInventory * self, , SteamInventoryUpdateHandle_t handle, _Out_ SteamInventoryResult_t * pResultHandle)");
export const SteamAPI_ISteamInventory_InspectItem: (self: ISteamInventory, pResultHandle: [number], pchItemToken: string) => boolean = lib.cdecl("bool SteamAPI_ISteamInventory_InspectItem(ISteamInventory * self, , _Out_ SteamInventoryResult_t * pResultHandle, const char * pchItemToken)");
interface ISteamVideo { __brand: "ISteamVideo" }
koffi.opaque("ISteamVideo");
export const SteamAPI_SteamVideo_v002: KoffiFunc<() => ISteamVideo> = lib.cdecl("ISteamVideo* SteamAPI_SteamVideo_v002()");
export const SteamAPI_ISteamVideo_GetVideoURL: (self: ISteamVideo, unVideoAppID: number) => void = lib.cdecl("void SteamAPI_ISteamVideo_GetVideoURL(ISteamVideo * self, , AppId_t unVideoAppID)");
export const SteamAPI_ISteamVideo_IsBroadcasting: (self: ISteamVideo, pnNumViewers: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamVideo_IsBroadcasting(ISteamVideo * self, , _Out_ int * pnNumViewers)");
export const SteamAPI_ISteamVideo_GetOPFSettings: (self: ISteamVideo, unVideoAppID: number) => void = lib.cdecl("void SteamAPI_ISteamVideo_GetOPFSettings(ISteamVideo * self, , AppId_t unVideoAppID)");
export const SteamAPI_ISteamVideo_GetOPFStringForApp: (self: ISteamVideo, unVideoAppID: number, pchBuffer: [string], pnBufferSize: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamVideo_GetOPFStringForApp(ISteamVideo * self, , AppId_t unVideoAppID, _Out_ char * pchBuffer, _Out_ int32 * pnBufferSize)");
interface ISteamParentalSettings { __brand: "ISteamParentalSettings" }
koffi.opaque("ISteamParentalSettings");
export const SteamAPI_SteamParentalSettings_v001: KoffiFunc<() => ISteamParentalSettings> = lib.cdecl("ISteamParentalSettings* SteamAPI_SteamParentalSettings_v001()");
export const SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled: (self: ISteamParentalSettings) => boolean = lib.cdecl("bool SteamAPI_ISteamParentalSettings_BIsParentalLockEnabled(ISteamParentalSettings * self)");
export const SteamAPI_ISteamParentalSettings_BIsParentalLockLocked: (self: ISteamParentalSettings) => boolean = lib.cdecl("bool SteamAPI_ISteamParentalSettings_BIsParentalLockLocked(ISteamParentalSettings * self)");
export const SteamAPI_ISteamParentalSettings_BIsAppBlocked: (self: ISteamParentalSettings, nAppID: number) => boolean = lib.cdecl("bool SteamAPI_ISteamParentalSettings_BIsAppBlocked(ISteamParentalSettings * self, , AppId_t nAppID)");
export const SteamAPI_ISteamParentalSettings_BIsAppInBlockList: (self: ISteamParentalSettings, nAppID: number) => boolean = lib.cdecl("bool SteamAPI_ISteamParentalSettings_BIsAppInBlockList(ISteamParentalSettings * self, , AppId_t nAppID)");
interface ISteamRemotePlay { __brand: "ISteamRemotePlay" }
koffi.opaque("ISteamRemotePlay");
export const SteamAPI_SteamRemotePlay_v001: KoffiFunc<() => ISteamRemotePlay> = lib.cdecl("ISteamRemotePlay* SteamAPI_SteamRemotePlay_v001()");
export const SteamAPI_ISteamRemotePlay_GetSessionCount: (self: ISteamRemotePlay) => number = lib.cdecl("uint32 SteamAPI_ISteamRemotePlay_GetSessionCount(ISteamRemotePlay * self)");
export const SteamAPI_ISteamRemotePlay_GetSessionID: (self: ISteamRemotePlay, iSessionIndex: number) => number = lib.cdecl("RemotePlaySessionID_t SteamAPI_ISteamRemotePlay_GetSessionID(ISteamRemotePlay * self, , int iSessionIndex)");
export const SteamAPI_ISteamRemotePlay_GetSessionSteamID: (self: ISteamRemotePlay, unSessionID: number) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamRemotePlay_GetSessionSteamID(ISteamRemotePlay * self, , RemotePlaySessionID_t unSessionID)");
export const SteamAPI_ISteamRemotePlay_GetSessionClientName: (self: ISteamRemotePlay, unSessionID: number) => string = lib.cdecl("const char * SteamAPI_ISteamRemotePlay_GetSessionClientName(ISteamRemotePlay * self, , RemotePlaySessionID_t unSessionID)");
export const SteamAPI_ISteamRemotePlay_BGetSessionClientResolution: (self: ISteamRemotePlay, unSessionID: number, pnResolutionX: [number], pnResolutionY: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamRemotePlay_BGetSessionClientResolution(ISteamRemotePlay * self, , RemotePlaySessionID_t unSessionID, _Out_ int * pnResolutionX, _Out_ int * pnResolutionY)");
export const SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite: (self: ISteamRemotePlay, steamIDFriend: number) => boolean = lib.cdecl("bool SteamAPI_ISteamRemotePlay_BSendRemotePlayTogetherInvite(ISteamRemotePlay * self, , uint64_steamid steamIDFriend)");
interface ISteamNetworkingMessages { __brand: "ISteamNetworkingMessages" }
koffi.opaque("ISteamNetworkingMessages");
export const SteamAPI_SteamNetworkingMessages_SteamAPI_v002: KoffiFunc<() => ISteamNetworkingMessages> = lib.cdecl("ISteamNetworkingMessages* SteamAPI_SteamNetworkingMessages_SteamAPI_v002()");
export const SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002: KoffiFunc<() => ISteamNetworkingMessages> = lib.cdecl("ISteamNetworkingMessages* SteamAPI_SteamGameServerNetworkingMessages_SteamAPI_v002()");
interface ISteamNetworkingSockets { __brand: "ISteamNetworkingSockets" }
koffi.opaque("ISteamNetworkingSockets");
export const SteamAPI_SteamNetworkingSockets_SteamAPI_v012: KoffiFunc<() => ISteamNetworkingSockets> = lib.cdecl("ISteamNetworkingSockets* SteamAPI_SteamNetworkingSockets_SteamAPI_v012()");
export const SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012: KoffiFunc<() => ISteamNetworkingSockets> = lib.cdecl("ISteamNetworkingSockets* SteamAPI_SteamGameServerNetworkingSockets_SteamAPI_v012()");
export const SteamAPI_ISteamNetworkingSockets_CloseConnection: (self: ISteamNetworkingSockets, hPeer: number, nReason: number, pszDebug: string, bEnableLinger: boolean) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworkingSockets_CloseConnection(ISteamNetworkingSockets * self, , HSteamNetConnection hPeer, int nReason, const char * pszDebug, bool bEnableLinger)");
export const SteamAPI_ISteamNetworkingSockets_CloseListenSocket: (self: ISteamNetworkingSockets, hSocket: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworkingSockets_CloseListenSocket(ISteamNetworkingSockets * self, , HSteamListenSocket hSocket)");
export const SteamAPI_ISteamNetworkingSockets_SetConnectionUserData: (self: ISteamNetworkingSockets, hPeer: number, nUserData: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworkingSockets_SetConnectionUserData(ISteamNetworkingSockets * self, , HSteamNetConnection hPeer, int64 nUserData)");
export const SteamAPI_ISteamNetworkingSockets_GetConnectionUserData: (self: ISteamNetworkingSockets, hPeer: number) => number = lib.cdecl("int64 SteamAPI_ISteamNetworkingSockets_GetConnectionUserData(ISteamNetworkingSockets * self, , HSteamNetConnection hPeer)");
export const SteamAPI_ISteamNetworkingSockets_SetConnectionName: (self: ISteamNetworkingSockets, hPeer: number, pszName: string) => void = lib.cdecl("void SteamAPI_ISteamNetworkingSockets_SetConnectionName(ISteamNetworkingSockets * self, , HSteamNetConnection hPeer, const char * pszName)");
export const SteamAPI_ISteamNetworkingSockets_GetConnectionName: (self: ISteamNetworkingSockets, hPeer: number, pszName: [string], nMaxLen: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworkingSockets_GetConnectionName(ISteamNetworkingSockets * self, , HSteamNetConnection hPeer, _Out_ char * pszName, int nMaxLen)");
export const SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus: (self: ISteamNetworkingSockets, hConn: number, pszBuf: [string], cbBuf: number) => number = lib.cdecl("int SteamAPI_ISteamNetworkingSockets_GetDetailedConnectionStatus(ISteamNetworkingSockets * self, , HSteamNetConnection hConn, _Out_ char * pszBuf, int cbBuf)");
export const SteamAPI_ISteamNetworkingSockets_CreatePollGroup: (self: ISteamNetworkingSockets) => number = lib.cdecl("HSteamNetPollGroup SteamAPI_ISteamNetworkingSockets_CreatePollGroup(ISteamNetworkingSockets * self)");
export const SteamAPI_ISteamNetworkingSockets_DestroyPollGroup: (self: ISteamNetworkingSockets, hPollGroup: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworkingSockets_DestroyPollGroup(ISteamNetworkingSockets * self, , HSteamNetPollGroup hPollGroup)");
export const SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup: (self: ISteamNetworkingSockets, hConn: number, hPollGroup: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworkingSockets_SetConnectionPollGroup(ISteamNetworkingSockets * self, , HSteamNetConnection hConn, HSteamNetPollGroup hPollGroup)");
export const SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort: (self: ISteamNetworkingSockets) => number = lib.cdecl("uint16 SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPort(ISteamNetworkingSockets * self)");
export const SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID: (self: ISteamNetworkingSockets) => number = lib.cdecl("SteamNetworkingPOPID SteamAPI_ISteamNetworkingSockets_GetHostedDedicatedServerPOPID(ISteamNetworkingSockets * self)");
export const SteamAPI_ISteamNetworkingSockets_RunCallbacks: (self: ISteamNetworkingSockets) => void = lib.cdecl("void SteamAPI_ISteamNetworkingSockets_RunCallbacks(ISteamNetworkingSockets * self)");
export const SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP: (self: ISteamNetworkingSockets, nNumPorts: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworkingSockets_BeginAsyncRequestFakeIP(ISteamNetworkingSockets * self, , int nNumPorts)");
interface ISteamNetworkingUtils { __brand: "ISteamNetworkingUtils" }
koffi.opaque("ISteamNetworkingUtils");
export const SteamAPI_SteamNetworkingUtils_SteamAPI_v004: KoffiFunc<() => ISteamNetworkingUtils> = lib.cdecl("ISteamNetworkingUtils* SteamAPI_SteamNetworkingUtils_SteamAPI_v004()");
export const SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess: (self: ISteamNetworkingUtils) => void = lib.cdecl("void SteamAPI_ISteamNetworkingUtils_InitRelayNetworkAccess(ISteamNetworkingUtils * self)");
export const SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate: (self: ISteamNetworkingUtils, flMaxAgeSeconds: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworkingUtils_CheckPingDataUpToDate(ISteamNetworkingUtils * self, , float flMaxAgeSeconds)");
export const SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter: (self: ISteamNetworkingUtils, popID: number, pViaRelayPoP: [number]) => number = lib.cdecl("int SteamAPI_ISteamNetworkingUtils_GetPingToDataCenter(ISteamNetworkingUtils * self, , SteamNetworkingPOPID popID, _Out_ SteamNetworkingPOPID * pViaRelayPoP)");
export const SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP: (self: ISteamNetworkingUtils, popID: number) => number = lib.cdecl("int SteamAPI_ISteamNetworkingUtils_GetDirectPingToPOP(ISteamNetworkingUtils * self, , SteamNetworkingPOPID popID)");
export const SteamAPI_ISteamNetworkingUtils_GetPOPCount: (self: ISteamNetworkingUtils) => number = lib.cdecl("int SteamAPI_ISteamNetworkingUtils_GetPOPCount(ISteamNetworkingUtils * self)");
export const SteamAPI_ISteamNetworkingUtils_GetPOPList: (self: ISteamNetworkingUtils, list: [number], nListSz: number) => number = lib.cdecl("int SteamAPI_ISteamNetworkingUtils_GetPOPList(ISteamNetworkingUtils * self, , _Out_ SteamNetworkingPOPID * list, int nListSz)");
export const SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp: (self: ISteamNetworkingUtils) => number = lib.cdecl("SteamNetworkingMicroseconds SteamAPI_ISteamNetworkingUtils_GetLocalTimestamp(ISteamNetworkingUtils * self)");
export const SteamAPI_ISteamNetworkingUtils_IsFakeIPv4: (self: ISteamNetworkingUtils, nIPv4: number) => boolean = lib.cdecl("bool SteamAPI_ISteamNetworkingUtils_IsFakeIPv4(ISteamNetworkingUtils * self, , uint32 nIPv4)");
interface ISteamGameServer { __brand: "ISteamGameServer" }
koffi.opaque("ISteamGameServer");
export const SteamAPI_SteamGameServer_v014: KoffiFunc<() => ISteamGameServer> = lib.cdecl("ISteamGameServer* SteamAPI_SteamGameServer_v014()");
export const SteamAPI_ISteamGameServer_SetProduct: (self: ISteamGameServer, pszProduct: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetProduct(ISteamGameServer * self, , const char * pszProduct)");
export const SteamAPI_ISteamGameServer_SetGameDescription: (self: ISteamGameServer, pszGameDescription: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetGameDescription(ISteamGameServer * self, , const char * pszGameDescription)");
export const SteamAPI_ISteamGameServer_SetModDir: (self: ISteamGameServer, pszModDir: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetModDir(ISteamGameServer * self, , const char * pszModDir)");
export const SteamAPI_ISteamGameServer_SetDedicatedServer: (self: ISteamGameServer, bDedicated: boolean) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetDedicatedServer(ISteamGameServer * self, , bool bDedicated)");
export const SteamAPI_ISteamGameServer_LogOn: (self: ISteamGameServer, pszToken: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_LogOn(ISteamGameServer * self, , const char * pszToken)");
export const SteamAPI_ISteamGameServer_LogOnAnonymous: (self: ISteamGameServer) => void = lib.cdecl("void SteamAPI_ISteamGameServer_LogOnAnonymous(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_LogOff: (self: ISteamGameServer) => void = lib.cdecl("void SteamAPI_ISteamGameServer_LogOff(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_BLoggedOn: (self: ISteamGameServer) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServer_BLoggedOn(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_BSecure: (self: ISteamGameServer) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServer_BSecure(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_GetSteamID: (self: ISteamGameServer) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamGameServer_GetSteamID(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_WasRestartRequested: (self: ISteamGameServer) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServer_WasRestartRequested(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_SetMaxPlayerCount: (self: ISteamGameServer, cPlayersMax: number) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetMaxPlayerCount(ISteamGameServer * self, , int cPlayersMax)");
export const SteamAPI_ISteamGameServer_SetBotPlayerCount: (self: ISteamGameServer, cBotplayers: number) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetBotPlayerCount(ISteamGameServer * self, , int cBotplayers)");
export const SteamAPI_ISteamGameServer_SetServerName: (self: ISteamGameServer, pszServerName: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetServerName(ISteamGameServer * self, , const char * pszServerName)");
export const SteamAPI_ISteamGameServer_SetMapName: (self: ISteamGameServer, pszMapName: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetMapName(ISteamGameServer * self, , const char * pszMapName)");
export const SteamAPI_ISteamGameServer_SetPasswordProtected: (self: ISteamGameServer, bPasswordProtected: boolean) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetPasswordProtected(ISteamGameServer * self, , bool bPasswordProtected)");
export const SteamAPI_ISteamGameServer_SetSpectatorPort: (self: ISteamGameServer, unSpectatorPort: number) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetSpectatorPort(ISteamGameServer * self, , uint16 unSpectatorPort)");
export const SteamAPI_ISteamGameServer_SetSpectatorServerName: (self: ISteamGameServer, pszSpectatorServerName: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetSpectatorServerName(ISteamGameServer * self, , const char * pszSpectatorServerName)");
export const SteamAPI_ISteamGameServer_ClearAllKeyValues: (self: ISteamGameServer) => void = lib.cdecl("void SteamAPI_ISteamGameServer_ClearAllKeyValues(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_SetKeyValue: (self: ISteamGameServer, pKey: string, pValue: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetKeyValue(ISteamGameServer * self, , const char * pKey, const char * pValue)");
export const SteamAPI_ISteamGameServer_SetGameTags: (self: ISteamGameServer, pchGameTags: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetGameTags(ISteamGameServer * self, , const char * pchGameTags)");
export const SteamAPI_ISteamGameServer_SetGameData: (self: ISteamGameServer, pchGameData: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetGameData(ISteamGameServer * self, , const char * pchGameData)");
export const SteamAPI_ISteamGameServer_SetRegion: (self: ISteamGameServer, pszRegion: string) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetRegion(ISteamGameServer * self, , const char * pszRegion)");
export const SteamAPI_ISteamGameServer_SetAdvertiseServerActive: (self: ISteamGameServer, bActive: boolean) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SetAdvertiseServerActive(ISteamGameServer * self, , bool bActive)");
export const SteamAPI_ISteamGameServer_GetAuthSessionTicket: (self: ISteamGameServer, pTicket: [void], cbMaxTicket: number, pcbTicket: [number]) => number = lib.cdecl("HAuthTicket SteamAPI_ISteamGameServer_GetAuthSessionTicket(ISteamGameServer * self, , _Out_ void * pTicket, int cbMaxTicket, _Out_ uint32 * pcbTicket)");
export const SteamAPI_ISteamGameServer_EndAuthSession: (self: ISteamGameServer, steamID: number) => void = lib.cdecl("void SteamAPI_ISteamGameServer_EndAuthSession(ISteamGameServer * self, , uint64_steamid steamID)");
export const SteamAPI_ISteamGameServer_CancelAuthTicket: (self: ISteamGameServer, hAuthTicket: number) => void = lib.cdecl("void SteamAPI_ISteamGameServer_CancelAuthTicket(ISteamGameServer * self, , HAuthTicket hAuthTicket)");
export const SteamAPI_ISteamGameServer_RequestUserGroupStatus: (self: ISteamGameServer, steamIDUser: number, steamIDGroup: number) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServer_RequestUserGroupStatus(ISteamGameServer * self, , uint64_steamid steamIDUser, uint64_steamid steamIDGroup)");
export const SteamAPI_ISteamGameServer_GetGameplayStats: (self: ISteamGameServer) => void = lib.cdecl("void SteamAPI_ISteamGameServer_GetGameplayStats(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_GetServerReputation: (self: ISteamGameServer) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamGameServer_GetServerReputation(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_HandleIncomingPacket: (self: ISteamGameServer, pData: void, cbData: number, srcIP: number, srcPort: number) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServer_HandleIncomingPacket(ISteamGameServer * self, , const void * pData, int cbData, uint32 srcIP, uint16 srcPort)");
export const SteamAPI_ISteamGameServer_GetNextOutgoingPacket: (self: ISteamGameServer, pOut: [void], cbMaxOut: number, pNetAdr: [number], pPort: [number]) => number = lib.cdecl("int SteamAPI_ISteamGameServer_GetNextOutgoingPacket(ISteamGameServer * self, , _Out_ void * pOut, int cbMaxOut, _Out_ uint32 * pNetAdr, _Out_ uint16 * pPort)");
export const SteamAPI_ISteamGameServer_AssociateWithClan: (self: ISteamGameServer, steamIDClan: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamGameServer_AssociateWithClan(ISteamGameServer * self, , uint64_steamid steamIDClan)");
export const SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility: (self: ISteamGameServer, steamIDNewPlayer: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamGameServer_ComputeNewPlayerCompatibility(ISteamGameServer * self, , uint64_steamid steamIDNewPlayer)");
export const SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection: (self: ISteamGameServer) => number = lib.cdecl("uint64_steamid SteamAPI_ISteamGameServer_CreateUnauthenticatedUserConnection(ISteamGameServer * self)");
export const SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED: (self: ISteamGameServer, steamIDUser: number) => void = lib.cdecl("void SteamAPI_ISteamGameServer_SendUserDisconnect_DEPRECATED(ISteamGameServer * self, , uint64_steamid steamIDUser)");
export const SteamAPI_ISteamGameServer_BUpdateUserData: (self: ISteamGameServer, steamIDUser: number, pchPlayerName: string, uScore: number) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServer_BUpdateUserData(ISteamGameServer * self, , uint64_steamid steamIDUser, const char * pchPlayerName, uint32 uScore)");
interface ISteamGameServerStats { __brand: "ISteamGameServerStats" }
koffi.opaque("ISteamGameServerStats");
export const SteamAPI_SteamGameServerStats_v001: KoffiFunc<() => ISteamGameServerStats> = lib.cdecl("ISteamGameServerStats* SteamAPI_SteamGameServerStats_v001()");
export const SteamAPI_ISteamGameServerStats_RequestUserStats: (self: ISteamGameServerStats, steamIDUser: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamGameServerStats_RequestUserStats(ISteamGameServerStats * self, , uint64_steamid steamIDUser)");
export const SteamAPI_ISteamGameServerStats_GetUserStatInt32: (self: ISteamGameServerStats, steamIDUser: number, pchName: string, pData: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServerStats_GetUserStatInt32(ISteamGameServerStats * self, , uint64_steamid steamIDUser, const char * pchName, _Out_ int32 * pData)");
export const SteamAPI_ISteamGameServerStats_GetUserStatFloat: (self: ISteamGameServerStats, steamIDUser: number, pchName: string, pData: [number]) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServerStats_GetUserStatFloat(ISteamGameServerStats * self, , uint64_steamid steamIDUser, const char * pchName, _Out_ float * pData)");
export const SteamAPI_ISteamGameServerStats_GetUserAchievement: (self: ISteamGameServerStats, steamIDUser: number, pchName: string, pbAchieved: [boolean]) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServerStats_GetUserAchievement(ISteamGameServerStats * self, , uint64_steamid steamIDUser, const char * pchName, _Out_ bool * pbAchieved)");
export const SteamAPI_ISteamGameServerStats_SetUserStatInt32: (self: ISteamGameServerStats, steamIDUser: number, pchName: string, nData: number) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServerStats_SetUserStatInt32(ISteamGameServerStats * self, , uint64_steamid steamIDUser, const char * pchName, int32 nData)");
export const SteamAPI_ISteamGameServerStats_SetUserStatFloat: (self: ISteamGameServerStats, steamIDUser: number, pchName: string, fData: number) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServerStats_SetUserStatFloat(ISteamGameServerStats * self, , uint64_steamid steamIDUser, const char * pchName, float fData)");
export const SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat: (self: ISteamGameServerStats, steamIDUser: number, pchName: string, flCountThisSession: number, dSessionLength: number) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServerStats_UpdateUserAvgRateStat(ISteamGameServerStats * self, , uint64_steamid steamIDUser, const char * pchName, float flCountThisSession, double dSessionLength)");
export const SteamAPI_ISteamGameServerStats_SetUserAchievement: (self: ISteamGameServerStats, steamIDUser: number, pchName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServerStats_SetUserAchievement(ISteamGameServerStats * self, , uint64_steamid steamIDUser, const char * pchName)");
export const SteamAPI_ISteamGameServerStats_ClearUserAchievement: (self: ISteamGameServerStats, steamIDUser: number, pchName: string) => boolean = lib.cdecl("bool SteamAPI_ISteamGameServerStats_ClearUserAchievement(ISteamGameServerStats * self, , uint64_steamid steamIDUser, const char * pchName)");
export const SteamAPI_ISteamGameServerStats_StoreUserStats: (self: ISteamGameServerStats, steamIDUser: number) => number = lib.cdecl("SteamAPICall_t SteamAPI_ISteamGameServerStats_StoreUserStats(ISteamGameServerStats * self, , uint64_steamid steamIDUser)");
interface ISteamNetworkingFakeUDPPort { __brand: "ISteamNetworkingFakeUDPPort" }
koffi.opaque("ISteamNetworkingFakeUDPPort");
export const SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort: (self: ISteamNetworkingFakeUDPPort) => void = lib.cdecl("void SteamAPI_ISteamNetworkingFakeUDPPort_DestroyFakeUDPPort(ISteamNetworkingFakeUDPPort * self)");